[h: arguments = macro.args]

[h: tokenId = json.get(arguments, "tokenId")]
[h: skType = json.get(arguments, "skType")]

[r, switch(skType), code:
  case "common" :{
  	[h: aSkills = getProperty("commonSkills", tokenId)]
    [h: advSkDb = getLibProperty("CommonSkills", "Lib:RQII")]
  };
  case "advanced" :{
  	[h: aSkills = getProperty("advSkills", tokenId)]
    [h: advSkDb = getLibProperty("AdvSkills", "Lib:RQII")]
  };
  case "combat" :{
  	[h: aSkills = getProperty("combatSkills", tokenId)]
  	[h: advSkDb = getLibProperty("CombatSkills", "Lib:RQII")]
  };
  case "magic" :{
  	[h: aSkills = getProperty("magicSkills", tokenId)]
  	[h: advSkDb = getLibProperty("MagicSkills", "Lib:RQII")]
  };
  default: {
 	[h: "<!-- do nothing -->"]
 	<br>Unknown skill type !<br>
  }
]

[h: "<!-- get charc value to compute skill base -->"]
[h: STR = getProperty("STR",tokenId)]
[h: CON = getProperty("CON",tokenId)]
[h: SIZ = getProperty("SIZ",tokenId)]
[h: INT = getProperty("INT",tokenId)]
[h: POW = getProperty("POW",tokenId)]
[h: DEX = getProperty("DEX",tokenId)]
[h: CHA = getProperty("CHA",tokenId)]
[h: propMagicPoint = getProperty("MagicPoint",tokenId)]
[h: POWded = json.get(propMagicPoint,"dedPOW")]

[h, foreach(param,arguments,""),code :{
  [h: skillExist = json.contains(aSkills,param)]
  [h: "<!-- add only new skill -->"]
  [h, if((param != "tokenId")&&(param != "edit_btn")&&(param != "skType")&&(! skillExist)), code :{
  	[h: "<!-- get skill model -->"]
  	[h: skRef = json.get(advSkDb,param)]
  	[h: newSkCode = json.get(skRef,"code")]
  	[h: skSubType = json.get(skRef,"subtype")]
  	[h: skCulture = 0]
  	[h: skProfession = 0]
  	[h: skExperience = 0]
  	[h: "<!-- works because we have properties with the name DEX, INT etc... -->"]
  	[h: skBase = eval(newSkCode)]
  	[h: skCurrent = skBase + skCulture + skProfession + skExperience]
  	[h: newAdvSkillValues = json.set("{}","code",newSkCode)]
  	[h: newAdvSkillValues = json.set(newAdvSkillValues,"subtype",skSubType)]
  	[h: newAdvSkillValues = json.set(newAdvSkillValues,"current",skCurrent)]
  	[h: newAdvSkillValues = json.set(newAdvSkillValues,"base",skBase)]
  	[h: newAdvSkillValues = json.set(newAdvSkillValues,"culture",skCulture)]
  	[h: newAdvSkillValues = json.set(newAdvSkillValues,"profession",skProfession)]
  	[h: newAdvSkillValues = json.set(newAdvSkillValues,"experience",skExperience)]
  	[h: aSkills = json.set(aSkills,param,newAdvSkillValues)]
  }]

}]

[h, switch(skType), code:
    case "common" :{
  	   [h: setProperty("commonSkills",aSkills, tokenId)]
    };
    case "advanced" :{
       [h: aSkills = sortJson(aSkills)]
  	   [h: setProperty("advSkills",aSkills, tokenId)]
    };
    case "combat" :{
      [h: setProperty("combatSkills",aSkills, tokenId)]
    };
    case "magic" :{
      [h: setProperty("magicSkills",aSkills, tokenId)]
    };
    default: {
 	[h: "<!-- do nothing -->"]
 	  <br>Unknown skill type !<br>
    }
]	


[h: "<!-- Refresh edit Window for the new token -->"]
[h: macroParam = json.set("{}", "tokenId", tokenId)]
[r, macro("openSheetMgt@Lib:RQII"): macroParam]
