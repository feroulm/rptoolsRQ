[h: arguments = macro.args] 

[h: action = json.get(arguments,"action")]
[h: spellType = json.get(arguments, "spellType")]
[h: objectKey = json.get(arguments, "objectKey")]

[h: newDisplayname = json.get(arguments,"displayname")]
[h: newType = json.get(arguments,"type")]
[h: newGrimoire = json.get(arguments,"grimoire")]
[h: newCult = json.get(arguments,"cult")]
[h: newMagnitude = json.get(arguments,"magnitude")]
[h: newLnk = json.get(arguments,"lnk")]

[h, switch(spellType), code:
  case "common" :{
    [h: objectsDb = getLibProperty("spellsDb", "Lib:RQII")]
  };
  case "divine" :{
    [h: objectsDb = getLibProperty("divineSpellsDb", "Lib:RQII")]
  };
  case "sorcery" :{
    [h: objectsDb = getLibProperty("sorcerySpellsDb", "Lib:RQII")]
  };
  case "draconic" :{
    [h: objectsDb = getLibProperty("draconicSpellsDb", "Lib:RQII")]
  };
  default: {
  <!-- do nothing -->
    [h: res = input("junk|spellType is wrong.|ignored|LABEL|SPAN=true")]
    [h: abort(0)]
  }
]

[h: objectExist = json.contains(objectsDb,objectKey)]

[r, if(! objectExist), code:{
  <!-- Creation -->
  [h: newObjectValues = json.set("{}","displayname",newDisplayname)]
  [h: newObjectValues = json.set(newObjectValues,"type",newType)]
  [h: newObjectValues = json.set(newObjectValues,"grimoire",newGrimoire)]
  [h: newObjectValues = json.set(newObjectValues,"cult",newCult)]
  [h: newObjectValues = json.set(newObjectValues,"magnitude",newMagnitude)]
  [h: newObjectValues = json.set(newObjectValues,"lnk",newLnk)]
  [h: objectsDb = json.set(objectsDb,objectKey,newObjectValues)]		
  
  Add a new object : [r: objectKey] 
};
{
  <!-- Update -->
	Update object: [r: objectKey] 
  [h: newObjectValues = json.get(objectsDb,objectKey)]
  [h: newObjectValues = json.set(newObjectValues,"displayname",newDisplayname)]
  [h: newObjectValues = json.set(newObjectValues,"type",newType)]
  [h: newObjectValues = json.set(newObjectValues,"grimoire",newGrimoire)]
  [h: newObjectValues = json.set(newObjectValues,"cult",newCult)]
  [h: newObjectValues = json.set(newObjectValues,"magnitude",newMagnitude)]
  [h: newObjectValues = json.set(newObjectValues,"lnk",newLnk)]
  
  [h: objectsDb = json.set(objectsDb,objectKey,newObjectValues)]
}]

[r, if(action == "delete"), code:{
   Delete object : [r: objectKey] 
  [h: objectsDb = json.remove(objectsDb, objectKey)]
}]


[h, switch(spellType), code:
  case "common" :{
    [h: setLibProperty("spellsDb", objectsDb, "Lib:RQII")]
  };
  case "divine" :{
    [h: setLibProperty("divineSpellsDb", objectsDb, "Lib:RQII")]
  };
  case "sorcery" :{
    [h: setLibProperty("sorcerySpellsDb", objectsDb, "Lib:RQII")]
  };
  case "draconic" :{
    [h: setLibProperty("draconicSpellsDb", objectsDb, "Lib:RQII")]
  };
  default: {
  <!-- do nothing -->
    [h: res = input("junk|spellType is wrong.|ignored|LABEL|SPAN=true")]
    [h: abort(0)]
  }
]

<!-- Refresh Data Mgt Window -->
[h: macroParam = json.set("{}", "tab", "magic","spellType",spellType)]
[r, macro("openDataMgt@Lib:RQII"): macroParam]