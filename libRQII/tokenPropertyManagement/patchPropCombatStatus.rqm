<!-- Principe , on ajoute les nouveau champ et on remet les valeur des anciens champs "important" si il existe

- A chaque evol de combatStatus on défini dans cette macro :
--- la nouvelle structure dans newCombatStatusModel
--- la var patchVersionTag qui doit matcher l'item versionTag de la structure
- Copier l'ancienne structure dans oldCombatStatus
- mettre à jour la nouvelle structuer
- recopier si elle existe les valeurs suivantes :
-- defWeaponNb
-- bonusCA
-- magicCA
- ensuite on appelle la methode resetCombat status qui recalcule les valeurs :
-- baseCA : sur base de la dex+int
-- currWeaponNb = defWeaponNb
-- weaponCA = defWeaponNb -1
-- ccCa : sommme de baseCA + bonusCA + weaponCA + 
- ce qui est du param "spécifique" c'est uniquement defWeaponNb , bonusCA magicCA
-->

<!-- cas pour passer de a plusieurs version.... 
- Passage de v1.0.0 à v3.0.0 : on check juste l'existence de spellReady
-->
<!-- version history 
- v1.0.0 : initial version
- v2.0.0 : add spellReady prop
- v3.0.0 : add versionTag, cLogTokenId props
-->

<!-- launch on selected token from panel GM/patchPropCombatStatus -->

[h: arguments = macro.args]
[h, if(json.isEmpty(arguments)): tokenId = currentToken(); tokenId = json.get(arguments,"tokenId")]

[h: patchVersionTag = "v3.0.0"]

[h: newCombatStatusModel = '{
    "turnStatus": "on",
    "activeTurn": 0,
    "chargeStatus": "none",
		"spellReady": 0,
    "situationMod": "none",
    "activeCA": 0,
    "ccCA": 0,
    "proactiveCA": 0,
    "reactiveCA": 0,
    "baseCA": 0,
    "bonusCA": 0,
    "weaponCA": 0,
    "magicCA": 0,
    "castCA": 0,
    "reloadCA": 0,
    "lostProCA": 0,
    "lostCA": 0,
    "firstEvade": 0,
    "weaponReach": "ok",
    "currWeaponNb": 1,
    "defWeaponNb": 1,
		"cLogTokenId": "none",
		"versionTag" : "v3.0.0"
}']

[h: oldCombatStatus = getProperty("combatStatus",tokenId)]

<!-- Check version -->
[h: currentVersion = json.get(oldCombatStatus,"versionTag")]
[h, if(currentVersion == ""), code:{
  [h: propspellReady = json.get(oldCombatStatus,"spellReady")]
  [h, if(propspellReady != "") : currentVersion = "v2.0.0";currentVersion = "v1.0.0"]
}]

[h: patchLog = "Patching <i>combatStatus</i> properties for <b>"+getName(tokenId)+ "</b> from <i>"+currentVersion+"</i> to <b>"+patchVersionTag+"</b>"]
[h: res = input("junk|<html>"+patchLog+". <br>This will reset all token value. <br>Are you sure?  Click OK to confirm.</html>|ignored|LABEL|SPAN=true")]
[h: abort(res)]	

<!-- copy value when the item exists -->

[h, foreach(item, oldCombatStatus, ""), code:{
  [h: itemValue = json.get(oldCombatStatus,item)]
  [h, if(itemValue != "") : newCombatStatusModel = json.set(newCombatStatusModel,item,itemValue)]
}]

<!-- Check if current Combat Token exist and patch cLogTokenID value in that case -->
[h:"<!-- get current combat token -->"]
[h: cLogTokenId = findCurrentCombatToken()]

[h, if(cLogTokenId != "none") : newCombatStatusModel = json.set(newCombatStatusModel,"cLogTokenId",cLogTokenId)]

[h: setProperty("combatStatus",newCombatStatusModel,tokenId)]

[r: patchLog] is done.