[h: arguments = macro.args]
[h, if(json.isEmpty(arguments)),code: {
	[h: tokenId = currentToken()]
	[h: tokenMap = getCurrentMapName()]
};{ 
	[h: tokenId = json.get(arguments,"tokenId")]
	[h: tokenMap = json.get(arguments, "tokenMap")]
	[h, if(tokenMap == "") : tokenMap = getCurrentMapName()]
}] 

<br>
(% style="border: 2px solid white;" %)|(% style="border: 2px solid white;" %)(((
<br>
|=STR |=CON |=SIZ |=INT |=POW |=DEX |=CHA
<br>|
[h: propNames = "STR, CON, SIZ, INT, POW, DEX, CHA"]
[foreach(prop, propNames, "|"), code: {
  [r: getProperty(prop, tokenId, tokenMap)]
}]
<br>
)))|(% style="border: 2px solid white;" %) |(% style="border: 2px solid white;" %)(((
<br>
|= &#91;&#91;CA>>Rq.PersoCreation||rel="__blank"&#93;&#93; |= &#91;&#91;SR>>Rq.PersoCreation||rel="__blank"&#93;&#93; |= &#91;&#91;MP>>Rq.MagicRules||rel="__blank"&#93;&#93;
<br>
[h: propStrikeRank = getProperty("StrikeRank",tokenId,tokenMap)]
[h: propCombatStatus = getProperty("combatStatus",tokenId,tokenMap)]
[h: propMagicPoint = getProperty("MagicPoint",tokenId,tokenMap)]
|[r: json.get(propCombatStatus,"baseCA")]|[r: json.get(propStrikeRank, "current")]([r: json.get(propStrikeRank, "base")])|[r: json.path.read(propMagicPoint,"MP.current")]/[r: json.path.read(propMagicPoint,"MP.base")]
<br>
)))|(% style="border: 2px solid white;" %) |(% style="border: 2px solid white;" %)(((
<br>
&#91;&#91;Règles création>>Rq.PersoCreation&#93;&#93;
<br>
[h: propOtherAttr = getProperty("otherAttr",tokenId)]
&#91;&#91;Healing Rate>>Rq.DamageRules||anchor="HHealing-Soins"]] : **[r: json.get(propOtherAttr,"healRate")]**
<br>
&#91;&#91;Improvement Mod.>>Rq.PersoCreation||anchor="HImprovementrules"]] : **[r: json.get(propOtherAttr,"improvementMod")]**
<br>
)))
<br>
(% style="border: 2px solid white;" %)|(% style="border: 2px solid white;" %)(((
<br>
[h: propArmorPenalty = getProperty("ArmorPenalty",tokenId)]
|Movement |**[r: json.get(propOtherAttr,"movement")]** |Armor Penalty  |**-[r: json.get(propArmorPenalty, "current")]**
<br>
[h: propDamageMod = getProperty("DamageMod",tokenId,tokenMap)]
|Damage Mod.    |**[r: json.get(propDamageMod, "current")]**|Ded. POU |**[r: json.get(propMagicPoint, "dedPOW")]**
<br>
|Hero Points |**[r: json.get(propOtherAttr,"currHeroPts")]**|Enc |**[r: json.get(propOtherAttr,"currEnc")]** / [r: json.get(propOtherAttr,"travelEnc")]
<br>
)))|(% style="border: 2px solid white;" %) |(% style="border: 2px solid white;" %)(((
<br>
**Richesses** (% style="color: #A5ACAF;" %)(//hidden//)(%%)
<br>
|= GP |= SP |= CP |= Autres
<br>
[h: propWealth = getProperty("wealth", tokenId)]
[h: wealthHold = json.get(propWealth,"hold")]
[h: wealthHidden = json.get(propWealth,"hidden")]
|[r: json.get(wealthHold,"gp")]<br>(% style="color: #A5ACAF;" %)(//[r: json.get(wealthHidden,"gp")]//)(%%) |[r: json.get(wealthHold,"sp")]<br>(% style="color: #A5ACAF;" %)(//[r: json.get(wealthHidden,"sp")]//)(%%)|[r: json.get(wealthHold,"cp")]<br>(% style="color: #A5ACAF;" %)(//[r: json.get(wealthHidden,"cp")]//)(%%)|[r: json.get(wealthHold,"others")]<br>(% style="color: #A5ACAF;" %)(//[r: json.get(wealthHidden,"others")]//)(%%)
<br>
)))|(% style="border: 2px solid white;" %) |(% style="border: 2px solid white;" %)(((
<br>
**&#91;&#91;Fatigue>>Rq.FatigueRules&#93;&#93;**
<br>
[h: propFatigue = getProperty("fatigue",tokenId)]
[r: json.get(propFatigue,"level")]
<br>
)))
<br><br>
== Armures & Points de vie ==
<br><br>
(% style="border: 1px solid white; margin: 0px;" %)|(% style="border: 1px solid white; margin: 0px;" %)(((
<br>
|=D20 |=Location |=AP orig|=AP current|=HP orig|=HP current
<br>
[h: pLocD20 = getProperty("locD20", tokenId)]
[h: pLocName= getProperty("locName", tokenId)]
[h: pLocAP = getProperty("locAP", tokenId)]
[h: pLocAPorig = getProperty("locAPorig", tokenId)]
[h: pLocHP = getProperty("locHP", tokenId)]
[h: pLocHPorig = getProperty("locHPorig", tokenId)]
[h: pLocNb = getProperty("locNb", tokenId)]
[for(i,1,pLocNb+1,1,""), code:{
  |[r: getStrProp(pLocD20, strformat("loc%{i}"))]|[r: getStrProp(pLocName, strformat("loc%{i}"))]|[r: getStrProp(pLocAPorig, strformat("loc%{i}"))]|**[r: getStrProp(pLocAP, strformat("loc%{i}"))]**|[r: getStrProp(pLocHPorig, strformat("loc%{i}"))]|**[r: getStrProp(pLocHP, strformat("loc%{i}"))]**
  <br>
}]
)))|(% style="border: 1px solid white; margin: 0px;" %) |(% style="border: 1px solid white; margin: 0px;" %)(((
<br>
**Combat Style :** 
[h: aSkills = getProperty("combatSkills", tokenId)]
[foreach(skill, aSkills, ","), code: {
  	  [h: skillName = replace(lower(skill),"[^a-zA-Z0-9_.]","")]
  	  [h: skillValues = json.get(aSkills,skill)]
      [r: skill] [r: json.get(skillValues,"current")]%
}]
[h: aSkills = getProperty("commonSkills", tokenId)]
[h: skillValues = json.get(aSkills,"Unarmed")]
, Unarmed [r: json.get(skillValues,"current")]%
. **DMG :** [r: json.get(propDamageMod, "current")]
<br><br>
|=Type |=Size |=Reach |= Dmg |= AP/HP |=Manoe. |= Spe.
<br>
[h,macro("getWeaponNb@this"): tokenId]
[h: wpList = macro.return]
[foreach(weapon, wpList, ""), code: {
  [h,macro("getWeapon@this"): "weaponNb="+weapon+"; tokId="+tokenId]
  [h: wProp = macro.return]
  |[r: getStrProp(wProp, "Name")] ##[r: getStrProp(wProp, "Type")]##
  |[r: getStrProp(wProp, "Size")]|[r: getStrProp(wProp, "Reach")]|[r: getStrProp(wProp, "Damage")]
  |[r: getStrProp(wProp, "ApHp")]|[r: getStrProp(wProp, "Manoeuvre")]|[r: getStrProp(wProp, "Special")]
  <br>
}]
<br>
|=Type |=Size |=Load |=Range |=Dmg |=Mod |=AP/HP |= Manoe. |= Spe.
<br>
[h,macro("getMissileNb@this"): tokenId]
[h: wpList = macro.return]
[foreach(missile, wpList, ""), code: {
  [h,macro("getMissile@this"): "weaponNb="+missile+"; tokId="+tokenId]
  [h: wProp = macro.return]
  |[r: getStrProp(wProp, "Name")] ##[r: getStrProp(wProp, "Type")]##
  |[r: getStrProp(wProp, "Size")]|[r: getStrProp(wProp, "Load")]|[r: getStrProp(wProp, "Reach")]|[r: getStrProp(wProp, "Damage")]
  |[r: getStrProp(wProp, "Modif")]|[r: getStrProp(wProp, "ApHp")]|[r: getStrProp(wProp, "Manoeuvre")]|[r: getStrProp(wProp, "Special")]|
  <br>
}]
)))
<br><br>
== Skills, Magie, Equipements ==
<br><br>
(% style="border: 1px solid white; margin: 0px;" %)|(% style="border: 1px solid white; margin: 0px; vertical-align: top;" %)(((
<br>
**Common Skills**
<br>
[h: aSkills = getProperty("commonSkills", tokenId)]
[foreach(skill, aSkills, ""), code: {
  [h: skillValues = json.get(aSkills,skill)]
  [h: skillSubtype = json.get(skillValues,"subtype")]
  |**[r: skill] 
  [r, if(skillSubtype != ""), code:{
  ([r: skillSubtype])
  }]
  ** ##([r: json.get(skillValues,"code")])##| [r: json.get(skillValues,"current")]%
  <br>
}]
)))|(% style="border: 1px solid white; margin: 0px;" %) |(% style="border: 1px solid white; margin: 0px; vertical-align: top;" %)(((
<br>
**&#91;&#91;Advanced Skills>>Rq.Skills.WebHome&#93;&#93;**
<br>
[h: aSkills = getProperty("advSkills", tokenId)]
[foreach(skill, aSkills, ""), code: {
  [h: skillValues = json.get(aSkills,skill)]
  [h: skillSubtype = json.get(skillValues,"subtype")]
  |**[r: skill] 
  [r, if(skillSubtype != ""), code:{
  ([r: skillSubtype])
  }]
  ** ##([r: json.get(skillValues,"code")])##| [r: json.get(skillValues,"current")]%
  <br>
}]
|  |\\
<br>
[h: aSkills = getProperty("magicSkills", tokenId)]
[h, if(json.isEmpty(aSkills)): magicSkillsExist = 0; magicSkillsExist = 1]

[foreach(skill, aSkills, ""), code: {
  [h: skillValues = json.get(aSkills,skill)]
  [h: skillSubtype = json.get(skillValues,"subtype")]
  |**[r: skill] 
  [r, if(skillSubtype != ""), code:{
  ([r: skillSubtype])
  }]
  ** ##([r: json.get(skillValues,"code")])##| [r: json.get(skillValues,"current")]%
  <br>
}]
)))|(% style="border: 1px solid white; margin: 0px;" %) |(% style="border: 1px solid white; margin: 0px;vertical-align: top" %)(((
<br>
**Magic**
<br>
[h, if(magicSkillsExist) : skillValues = json.get(aSkills,"Common Magic"); skillValues = ""] 
|**&#91;&#91;Common>>Rq.SpellBook||rel="__blank"&#93;&#93;**\\
[r, if(skillValues != ""), code:{
##Common Magic [r: json.get(skillValues,"current")]%##
}]
[h: propSpells = getProperty("spells", tokenId)]
|
[foreach(spell, propSpells, ","), code: {
          [h: spellValues = json.get(propSpells,spell)]
	      [h: spellName = json.get(spellValues,"displayname")]
	      [h: spellMagnitude = json.get(spellValues,"magnitude")]
          [r: spellName] ([r: spellMagnitude])
}] 	
<br>
|(((**&#91;&#91;Divine>>Rq.SpellBookDivine||rel="__blank"&#93;&#93;** \\
[h: propSpells = getProperty("divineSpells", tokenId)]
[h: dedPow = getProperty("DedicatedPow", tokenId)]
[for(i,1,6,1,""), code: {
  [h: loreName = "Lore"+i]
  [h, if(magicSkillsExist) : loreValues = json.get(aSkills,loreName); loreValues = ""]
  [r, if(loreValues != ""), code :{
	##[r: loreName] [r: json.get(loreValues,"current")]%##,
  }]
  [h: pactName = "Pact"+i]
  [h: godlore = "godlore"+i]
  [h, if(magicSkillsExist) : pactValues = json.get(aSkills,pactName); pactValues = ""]
  [r, if(pactValues != ""), code :{
  ##[r: pactName] [r: json.get(pactValues,"current")]%## \\
  //dedPow ([r: json.get(dedPow,godlore)])//\\
  }]
}]
)))|(((
[for(i,1,6,1,""), code: {
  [h: cultName = "cult"+i]
  [h: jsonFilter = strformat(".[?(@.cult == '%{cultName}')]")]
  [h, if(!json.isEmpty(propSpells)) : cultSpells = json.path.read(propSpells, jsonFilter); cultSpells = ""] 
  [r, if(! json.isEmpty(cultSpells)), code:{
  \\##[r: cultName]##:
  }]
  [foreach(spell,cultSpells), code:{
      	[h: spellName = json.get(spell,"displayname")]
        [h: spellMagnitude = json.get(spell,"magnitude")]
        [r: spellName] ([r: spellMagnitude])  	
  }]
}]
)))
<br>
[h: propSpells = getProperty("sorcerySpells", tokenId)]
[h, if(magicSkillsExist) : manipValues = json.get(aSkills,"Manipulation"); manipValues = ""]
|(((**&#91;&#91;Sorcery>>Rq.SpellBookSorcery.WebHome||rel="__blank"&#93;&#93;**\\
[r, if(manipValues != ""), code :{
##Manipulation [r: json.get(manipValues,"current")]%##\\
}]

[for(i,1,6,1,""), code: {
  [h: grimoireName = "Grimoire"+i]
  [h, if(magicSkillsExist) : grimoireValues = json.get(aSkills,grimoireName); grimoireValues = ""]
  [r, if(grimoireValues != ""), code :{
	  ##[r: grimoireName] [r: json.get(grimoireValues,"current")]%##\\
  }]
}]
)))|(((
[for(i,1,6,1,""), code: {
  [h: grimName = "grimoire"+i]	
  [h: jsonFilter = strformat(".[?(@.grimoire == '%{grimName}')]")]
  [h, if(!json.isEmpty(propSpells)) : grimSpells = json.path.read(propSpells, jsonFilter); grimSpells = ""] 
  [r, if(! json.isEmpty(grimSpells)), code:{
    \\##[r: grimName]##:
  }]  
  [foreach(spell,grimSpells), code:{
    [h: spellName = json.get(spell,"displayname")]
    [h: spellMagnitude = json.get(spell,"magnitude")]
    [r: spellName] ([r: spellMagnitude])  	
  }]
}]
<br>
)))
<br>
|(((**&#91;&#91;Draconic>>Rq.SpellBookDraconic.WebHome||rel="__blank"&#93;&#93;**\\

[h, if(magicSkillsExist) : manipValues = json.get(aSkills,"Draconic Illumination"); manipValues = ""]
[r, if(manipValues != ""), code :{
##Draconic Illumination [r: json.get(manipValues,"current")]%##
}]
)))|(((
<br>
[h: propSpells = getProperty("draconicSpells", tokenId)]
[foreach(spell,propSpells,","), code:{
	[h: spellValues = json.get(propSpells,spell)]
  [h: spellName = json.get(spellValues,"displayname")]
	[h: spellMagnitude = json.get(spellValues,"magnitude")]
  [r: spellName] ([r: spellMagnitude])  	
}]

[h: propSpells = getProperty("draconicPrepared", tokenId)]
[r, if(! json.isEmpty(propSpells)), code:{
<br>\\
##prepared : ##
}]

[foreach(spell,propSpells), code:{
  [h: spellValues = json.get(propSpells,spell)]
  [h: spellName = json.get(spellValues,"displayname")]
 [h: spellMagnitude = json.get(spellValues,"magnitude")]
  [r: spellName] ([r: spellMagnitude])  	
}]
<br>
)))
<br>
|(((**&#91;&#91;Spirit>>Rq.SpellBookSpirit.WebHome||rel="__blank"&#93;&#93;**\\
[h: aSkills = getProperty("magicSkills", tokenId)]
[h, if(magicSkillsExist) : walkingValue = json.get(aSkills,"Spirit Walking"); walkingValue = ""]
[h, if(magicSkillsExist) : bindingValue = json.get(aSkills,"Spirit Binding"); bindingValue = ""]
[r, if(walkingValue != ""), code :{
##Spirit Walking [r: json.get(walkingValue,"current")]%##\\
}]
[r, if(bindingValue != ""), code :{
##Spirit Binding [r: json.get(bindingValue,"current")]%##
}]
)))|(((
<br>
[h: spirits = getProperty("spiritSpells", tokenId)]
[h: currPage = 1]
[h: prevLimit = 2]
[foreach(spirit, spirits, ","), code: {
  [h: spiritValues = json.get(spirits,spirit)]
	[h: spiritBaseName = json.get(spiritValues,"spiritBaseName")]
	[h: spiritCustomName = json.get(spiritValues,"spiritCustomName")]
  [r: if(currPage>prevLimit,"<br>","")]
  [h, if(currPage>prevLimit) : prevLimit=prevLimit+3]
  [h: currPage = currPage + 1]
  [r: spiritCustomName] ([r: spiritBaseName])  
}]
<br>
)))
<br><br>
 **&#91;&#91;Heroic  Hability>>Rq.HeroicHability||rel="__blank"&#93;&#93;**
<br>
[h: propHeroicSkills = getProperty("heroicSkills",tokenId)]
[h: propHeroicDb = getLibProperty("heroicDb","Lib:RQII")]
|
[foreach(trait, propHeroicSkills, ","), code: {
  [h: traitAttr = json.get(propHeroicDb,trait)]
  [h: traitName = json.get(traitAttr,"displayname")]
  [r: traitName]
}]
<br><br>
**&#91;&#91;Traits>>Rq.MonstersTraits||rel="__blank"&#93;&#93;**
<br>
[h: propTraits = getProperty("traits", tokenId)]
[h: propTraitsDb = getLibProperty("traitsDb","Lib:RQII")]
|
[foreach(trait, propTraits, ","), code: {
  [h: traitAttr = json.get(propTraitsDb,trait)]
  [h: traitName = json.get(traitAttr,"displayname")]
  [r: traitName]
}]
<br>
)))
<br><br>
(% style="border:1px solid white; margin:0px" %)|(% style="border-color:white; border-style:solid; border-width:1px; margin:0px; vertical-align:top" %)(((<br>
<br>
==== Equipement ====
<br>
[h: propEquipmentDesc = getProperty("equipmentDesc", tokenId)]
[h: holdEquipment = json.get(propEquipmentDesc,"hold")]
[h: hiddenEquipment = json.get(propEquipmentDesc,"hidden")]
##Hold : ##\\
[r: holdEquipment]
\\
<br>
##Hidden : ##\\
[r: hiddenEquipment]
<br>
)))|(% style="border-color:white; border-style:solid; border-width:1px; margin:0px" %) |(% style="border-color:white; border-style:solid; border-width:1px; margin:0px; vertical-align:top" %)(((<br>
<br>
==== Magic items ====
<br>
[h: propMagicItemDesc = getProperty("magicItemDesc", tokenId)]
[h: hold = json.get(propMagicItemDesc,"hold")]
[h: hidden = json.get(propMagicItemDesc,"hidden")]
##Hold : ##\\
[r: hold]
\\
<br>
##Hidden : ##\\
[r: hidden]
<br>
)))
<br><br>
== Description ==<br>
<br>
=== GM Notes ===
<br>
[r: getGMNotes(tokenId, tokenMap)]
<br>
=== PJ Notes ===
<br>
[r: getNotes(tokenId, tokenMap)]