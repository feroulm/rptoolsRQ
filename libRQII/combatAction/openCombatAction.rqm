[h: link = macroLinkText("openCombatAction@Lib:RQII", "none")]
[h: arguments = macro.args]
[h: tokenId = json.get(arguments,"id")]
[h: msg = json.get(arguments,"msg")]
[frame("Combat Action"): {
<html>
<head>
<link rel="onChangeSelection" type="macro" href="[r:link]">
</head>
<body>

<!-- Show action based on combat status -->
[r, if (msg != ""), code:{
<b>[r: msg]</b><br>
}]

[h: tCombatStatus = getProperty("combatStatus",tokenId)]
<b>[r: getName(tokenId)]</b> - Combat Status
<hr>
Turn Status : [r: turnStatus = json.get(tCombatStatus,"turnStatus")],
Active Turn : [r: activeTurn = json.get(tCombatStatus,"activeTurn")]<br>
Remaining CA : <b>[r: activeCA = json.get(tCombatStatus,"activeCA")]</b> / [r: ccCA = json.get(tCombatStatus,"ccCA")] ccCA <i>(baseCA : [r: baseCA = json.get(tCombatStatus,"baseCA")] )</i><br>
CA used during current MR :<br>
Proactive CA : [r: proactiveCA = json.get(tCombatStatus,"proactiveCA")], Reactive CA : [r: reactiveCA = json.get(tCombatStatus,"reactiveCA")]<br>
Fumble effect :<br>
Lost proactive CA : [r: lostProCA = json.get(tCombatStatus,"lostProCA")], Lost CA : [r: lostCA = json.get(tCombatStatus,"lostCA")]<br>
<br>
<!-- Compute condition based on various value -->
[h: showProactiveAction = 0]
[h: showReactiveAction = 0]
[h: showNoProactiveAction = 0]
[h: showNoAction = 1]
[h: noActionMsg = ""]

<!-- token can do a proactive action when it is his turn, if he has some CA left, if he has not played already during this cycle and if he has not lose proactiveCA -->
[h, if ((activeTurn)&&(activeCA>0)&&(turnStatus == "on")&&(lostProCA<=0)),code:{
  [h: showProactiveAction = 1]
  [h: showNoAction = 0]
}]
[h, if ((activeTurn)&&(activeCA>0)&&(turnStatus == "on")&&(lostProCA>0)),code:{
  [h: showNoProactiveAction = 1]
  [h: showNoAction = 0]
}]
[h, if ((!activeTurn)&&(activeCA>0)),code:{
  [h: showReactiveAction = 1]
  [h: showNoAction = 0]
}]
[h, if (activeCA<=0): noActionMsg = noActionMsg + "<li>no more CA for this MR</li>"]
[h, if (lostProCA>0): noProactiveActionMsg = noProactiveActionMsg + "<li>no more CA for this cycle</li>"]
[h, if (turnStatus == "disabled"): noActionMsg = noActionMsg + "<li>turn is disabled, token is out of combat</li>"]
[h, if (turnStatus == "off"): noActionMsg = noActionMsg + "<li>Token has already play his turn during this cycle</li>"]

<!-- Update action target -->
[h: linkUpdateCombat = macroLinkText("updateCombat@Lib:RQII", "all")]
<!-- Show proactive action : only if activeTurn = 1 , if activeCA >0 and if turn is On -->
[r, if (showProactiveAction), code :{
  Proactives Actions<br>
  <form action="[r:linkUpdateCombat]" method="json">
        <input type="hidden" name="id" value="[r:tokenId]">
        <input type="hidden" name="inc" value="attack">
        <input type="submit" name="edit_btn" value="attack">
  </form>
  <form action="[r:linkUpdateCombat]" method="json">
        <input type="hidden" name="id" value="[r:tokenId]">
        <input type="hidden" name="inc" value="delay">
        <input type="submit" name="edit_btn" value="delay">
  </form>


}]
<!-- Show reactive action : only if turnStatus = delay or on and activeTurn  -->
[r, if (showReactiveAction), code :{
  Reactive  Actions<br>
  <form action="[r:linkUpdateCombat]" method="json">
        <input type="hidden" name="id" value="[r:tokenId]">
        <input type="hidden" name="inc" value="parry">
        <input type="submit" name="edit_btn" value="parry">
  </form>
  <!-- Check is any token can still play -->
  
}]

[r, if (showNoProactiveAction), code :{
  You have still [r: lostCA] lost because of an event, you can only do reactive actions<br>
  You can delay your turn.
}]

[r, if (showNoAction), code :{
  Can only do free actions<br>
  No actions because :<ul>[r: noActionMsg]</ul>
  <!-- jump to next token which is not out or disabled -->
  [h, if (activeTurn): getNextTurn(tokenId)]
}]

</body>
</html>
}]