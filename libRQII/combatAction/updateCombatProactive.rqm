[h: "<!-- Handle proactive action -->"]
[h: tokenId = json.get(macro.args, "tokenId")]
[h: action = json.get(macro.args, "action")]
[h: nextTokenId = json.get(macro.args, "nextTokenId")]
[h: nextTokenOffset = json.get(macro.args, "nextTokenOffset")]

[h: srcWindow = json.get(macro.args, "srcWindow")]
[h, if(json.isEmpty(srcWindow)): srcWindow = "none"]

[h: "<!-- for log management -->"]
[h: actionLabel = json.get(macro.args, "actionLabel")]
[h: logMsg = ""]
[h: logComment = ""]
[h: logTokenStatus = ""]

[h: cLogTokenId = "none"]
[h: cLogTokenId = json.get(macro.args,"cLogTokenId")]
[h, if(json.isEmpty(cLogTokenId)) : cLogTokenId = "none"]
	
[h: currentCombatStatus = getProperty("combatStatus",tokenId)]

[h: activeCA = json.get(currentCombatStatus,"activeCA")]
[h: proactiveCA = json.get(currentCombatStatus,"proactiveCA")]
[h: reactiveCA = json.get(currentCombatStatus,"reactiveCA")]
[h: lostProCA = json.get(currentCombatStatus,"lostProCA")]

[h: castCA = json.get(currentCombatStatus,"castCA")]
[h: spellReady = json.get(currentCombatStatus,"spellReady")]

[h: firstEvade = json.get(currentCombatStatus,"firstEvade")]
[h: chargeStatus = json.get(currentCombatStatus,"chargeStatus")]

[h: "<!-- Grab list of opponent from weaponReach -->"]
[h: weaponReach = json.get(currentCombatStatus,"weaponReach")]
[h: "<!-- reset to a jsonArray (this to support not yet migrated token with previous usage of weaponReach -->"]
[h, if (json.type(weaponReach) != "ARRAY") : weaponReach = '[]']

[h: switchToNextToken = 1]

[h: "<!-- Check and Warn if the chosen action is breaking a current spell casting"]
[h: warnCast = if((action == "pursueCast" || action == "delay"),0,1)]
[h, if (castCA > 0 && warnCast == 1), code:{
  [h: res = input("junk|<html>You are currently casting a spell, normally you should use <b>pursueCast</b> but you choose a different action.<br><b>Your spell (and the MP you spent) will be loose.</b> Are you sure ?<br>Click <i>OK</i> to confirm, or click <i>Cancel</i> and then choose <i>pursueCast</i> to finish your spell</html>|ignored|LABEL|SPAN=true")]
  [h: abort(res)]
  [h: currentCombatStatus = json.set(currentCombatStatus,"castCA",0)]
  [h: setState("Casting", 0, tokenId)]
  [h: spellMsg = "Another action has been selected instead of pursueCast, Spell has been lost (castCA is set back to 0)."]
  [h: addCombatLogEntry(tokenId,"proactiveAction",spellMsg,"","1")]
}]

[h: "<!-- Check and Warn if the chosen action is breaking a current spell which is hold"]
[h: warnCast = if((action == "holdMagic" || action == "delay"),0,1)]
[h, if (spellReady > 0 && warnCast == 1), code:{
  [h: res = input("junk|<html>You are currently holding a spell, but you don't choose the <i>holdMagic</i>action.<br><b>Your spell will be released now automatically.</b> Are you sure ?<br>Click <i>OK</i> to confirm, or click <i>Cancel</i> and then choose <i>holdMagic</i> to continue holding your spell</html>|ignored|LABEL|SPAN=true")]
  [h: abort(res)]
  [h: currentCombatStatus = json.set(currentCombatStatus,"spellReady",0)]
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]
    [h: spellMsg = "Another action has been selected instead of holdmagic, Spell has been released automatically (at no CA cost)!"]
    [h: addCombatLogEntry(tokenId,"proactiveAction",spellMsg,"","1")]
}]

[h, switch(action), code:
  case "parrydelayed" : {
 	[h: action = "attack"]
  };
  case "evadedelayed" : {
  	[h: "<!-- toggle evade one time on two -->"]
    [h, if (firstEvade == 0),code:{
    	[h: currentCombatStatus = json.set(currentCombatStatus,"firstEvade",1)]
    	[h: msg = "First "+actionLabel+" is done, next proactive CA lost."]
    	[h: logMsg = "First "]
    }]
    [h, if (firstEvade > 0),code:{
    	[h: currentCombatStatus = json.set(currentCombatStatus,"firstEvade",0)]
    	[h: msg = "Second "+actionLabel+" is done, proactive action possible next turn."]
    	[h: logMsg = "Second "]
    }]
 	[h: action = "attack"]
  };
	case "evadeProneDelayed" : {
 	[h: action = "attack"]
	[h: currentCombatStatus = json.set(currentCombatStatus,"situationMod","prone")]
  [h: setState("Prone", 1, tokenId)]

	[h: logTokenStatus = "Token is prone."]
  };
  case "Outmanoeuvre" : {
  	[h: res = input("junk|Outmanoeuvre - Group opposed test of Evade skills are done ?|ignored|LABEL|SPAN=true")]
    [h: abort(res)]
  	[h: action = "changereach"]
  };
  case "chargeCrash" : {
  	<!-- charge is finished -->
  	[h: currentCombatStatus = json.set(currentCombatStatus,"chargeStatus","none")]
  	[h: setState("Charging", 0, tokenId)]
 	[h: action = "attack"]
  };
  case "chargePassage": {
  	[h: currentCombatStatus = json.set(currentCombatStatus,"chargeStatus","passageDone")]
  	[h: action = "attack"]
  };
  case "chargePrepare": {
  	[h: currentCombatStatus = json.set(currentCombatStatus,"chargeStatus","prepareCharge")]
  	[h: setState("Charging", 1, tokenId)]
  	[h: action = "proactiveNodice"]
  };
  case "regainFooting": {
  	[h: currentCombatStatus = json.set(currentCombatStatus,"situationMod","none")]
  	[h: setState("Prone", 0, tokenId)]
  	[h: action = "proactiveNodice"]
		[h: logMsg = strformat("%{logMsg} Regain footing has been done.<br>Prone status is removed.")]
  };  
  default: {
 	  [h: "<!-- do nothing -->"]
  }
]

[h, switch(action), code:
  case "declareProactive" : {
  	[h: declaredAction = json.get(macro.args, "declaredAction")]
  	[h: actionTarget = json.get(macro.args, "actionTarget")]
  	[h: actionDesc = json.get(macro.args, "actionDesc")]
		[h, if(actionTarget == "no target") : actionTarget = ""]
  	[h: logMsg = declaredAction+" "+actionTarget+" "+actionDesc]

  	[h: logCombatAction(tokenId,"turndeclare",logMsg)] 	
  	
		[h: switchToNextToken = 0]
  };
	case "proactiveNodice" : {
	  [h: "<!-- active action with no dice to result -->"]
    [h: remainingCA = activeCA - 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeCA",remainingCA)]
    [h: proactiveCA = proactiveCA + 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"proactiveCA",proactiveCA)]
    
    [h, if (remainingCA == 0): currentCombatStatus = json.set(currentCombatStatus,"turnStatus","out");currentCombatStatus = json.set(currentCombatStatus,"turnStatus","off")]
    [h, if (remainingCA == 0): setState("Out", 1, tokenId)]
    
		[h: "<!-- set activeTurn to 0 to indicate that token played is turn - mandatory (this is checked in onInitiativeChangeRequest -->"]
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeTurn",0)]
    
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]
  };
  case "attack" : {
	  [h: actionResult = askActionResult(tokenId,logMsg,actionLabel)]
		[h: logMsg = json.get(actionResult,"logMsg")]
		[h: isNotAborted = json.get(actionResult,"isNotAborted")]
		[h, if (isNotAborted), code:{
		};{
			[h: addCombatLogEntry(tokenId,"proactiveAction",logMsg,"No CA lost")]
			[h: abort(0)]
		}]
		
    [h: "<!-- decrement lostProCA , when a parry or an evade is done as a delayed action , we use the attack action-->"]
    [h, if (lostProCA > 0), code: {
      [h: lostProCA = lostProCA -1 ]
      [h: currentCombatStatus = json.set(currentCombatStatus,"lostProCA",lostProCA)]	
      [h: logComment = strformat("%{logComment} Remaining lostProCA : %{lostProCA}.")]
    };{}]	
    
		[h: logMsg = strformat("%{logMsg} %{logTokenStatus}")]
		
    [h: currentCombatStatus = processProactiveCA(currentCombatStatus,tokenId)]
    
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]
  
  };
  case "changereach" : {
    [h, if (json.isEmpty(weaponReach)), code:{
			[h: mpMsg = strformat("%{logMsg} No opponents. Engage some opponent first or choose another action.")]
			[h: input("junkVar|<html>"+mpMsg+"</html>|ignored|LABEL|SPAN=true")]
			[h: addCombatLogEntry(tokenId,"proactiveAction",mpMsg,"Change reach has been cancelled. No CA lost")]
			[h: abort(0)]
		};{}]
    
    [h: attLogMsg = ""]
    [h: defLogMsg = ""]
    [h: opponentArray = '[]']
    [h: selectOpponent = '[]']
    [r, foreach(item, weaponReach, ""), code: {
      [h: oppTokenId = json.get(item,"tokenId")]
      [h: oppTokenName = getName(oppTokenId)]
      [h: opponentArray = json.append(opponentArray, oppTokenId)]
      [h: selectOpponent = json.append(selectOpponent, oppTokenName)]
    }]
    
    [h: inputStr = strformat("tip|Select an opponent and the change Reach action:)||LABEL|SPAN=TRUE")]
    [h: inputStr = json.append(inputStr, strformat("oppIdx|"+selectOpponent+"|Engaged opponents|LIST|VALUE=NUMBER DELIMITER=JSON"))]
    [h: inputStr = json.append(inputStr, strformat("changeReach|closing,outranging,outmanoeuvring|<html>Change reach :</html>|RADIO|VALUE=STRING ORIENT=V SELECT=0"))]
    [h: inputStr = json.append(inputStr, strformat("actionResult|Critical,Success,Failure,Fumble|<html><br><br>What do you achieve ?&nbsp;</html>|RADIO|VALUE=STRING ORIENT=V SELECT=1"))]
    [h: abort(input(json.toList(inputStr,"##")))]
    
    
    [h: logMsg = strformat("%{logMsg} %{changeReach} is a %{actionResult}.<br>")]
    [h: selectedId = json.get(opponentArray,oppIdx)]
    [h: selectedTokenName = json.get(selectOpponent,oppIdx)]
    [h, if((actionResult == "Critical") || (actionResult == "Success")),code :{
      [h: fctResult = changeWeaponReachBetweenToken(tokenId,selectedId,changeReach)]
      [h: currentCombatStatus = json.get(fctResult,"attCombatStatusProp")]
      [h: attLogMsg = json.get(fctResult,"attLogMsg")]
      [h: defLogMsg = json.get(fctResult,"defLogMsg")]
      [h: logCombatAction(tokenId,"change",attLogMsg)]
      [h: logCombatAction(selectedId,"change",defLogMsg)]
    }]
     
    [h: currentCombatStatus = processProactiveCA(currentCombatStatus,tokenId)]
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]
    [h, if(changeReach == "outmanoeuvring"),code :{
      [h: inputStr = strformat("tip|%{selectedTokenName} is now outmanoeuvred. <br>If other opponents also failed their roll, use to action <i>Change Reach</i> in the section <i>Change after combat action</i> to modify their status without impacting the CA:)||LABEL|SPAN=TRUE")]
    }]
  };
  case "chargeRiposte" : {
		[h: actionResult = askActionResult(tokenId,logMsg,actionLabel)]
		[h: logMsg = json.get(actionResult,"logMsg")]
		[h: isNotAborted = json.get(actionResult,"isNotAborted")]
		[h, if (isNotAborted), code:{
		};{
			[h: addCombatLogEntry(tokenId,"proactiveAction",logMsg,"No CA lost")]
			[h: abort(0)]
		}]

  	[h: remainingCA = activeCA - 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeCA",remainingCA)]
    [h: proactiveCA = proactiveCA + 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"proactiveCA",proactiveCA)]
    
    [h, if (remainingCA == 0): currentCombatStatus = json.set(currentCombatStatus,"turnStatus","out");currentCombatStatus = json.set(currentCombatStatus,"turnStatus","off")]
    [h, if (remainingCA == 0): setState("Out", 1, tokenId)]   
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]

		[h: switchToNextToken = 0]
  };
  case "delay" : {
    [h: currentCombatStatus = json.set(currentCombatStatus,"turnStatus","delay")]
    [h: "<!-- set activeTurn to 0 to indicate that token played is turn - mandatory (this is checked in onInitiativeChangeRequest -->"]
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeTurn",0)]
    
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]
  };
  case "firstCast" : {
    [h: res = input(
		"spellMP|1|Nb of Magic Point (MP) to cast the spell|TEXT",
		"spellType|Common,Sorcery,Divine,Draconic,Spirit|Spell Magic Type|LIST|SELECT=0 VALUE=STRING"
		)]
		[h: abort(res)]
    
		[h: logMsg = strformat("Try casting %{spellType} Spell (%{spellMP} MP).")]
		
		[h: "<!-- Test remaining MP -->"]
		[h: propMagicPoint = getProperty("MagicPoint",tokenId)]
		[h: baseMP = json.path.read(propMagicPoint,"MP.base")]
		[h: currMP = json.path.read(propMagicPoint,"MP.current")]
		[h: newCurrMP = currMP - spellMP]

  
		[h, if (newCurrMP<0), code:{
			[h: mpMsg = strformat("%{logMsg} You have only %{currMP} mp left, you can't spent %{spellMP}.<br> Reduce the magnitude of your spell or choose another action.")]
			[h: input("junkVar|<html>"+mpMsg+"</html>|ignored|LABEL|SPAN=true")]
			[h: addCombatLogEntry(tokenId,"proactiveAction",mpMsg,"First cast has been cancelled. No CA lost")]
			[h: abort(0)]
		};{}]

		[h: computedCastCA = 1]
		[h: spellMsg = "Cast "+spellType+" spell [CA = 1]"]
		[h, if (spellType == "Common"),code:{
			[h: computedCastCA = round(spellMP/2)]
			[h: spellMsg = "Cast "+spellType+" spell [CA = round up (MP/2)]"]
		}]
		[h, if (spellType == "Sorcery"),code:{
			[h: computedCastCA = spellMP]
			[h, if(spellMp == 0): computedCastCA = 1] 
			[h: spellMsg = "Cast "+spellType+" spell [CA = MP]"]
		}]
		[h, if (spellType == "Divine"): computedCastCA = 1 ]
		[h, if (spellType == "Draconic"),code:{
			[h: computedCastCA = "Change Me"]
			[h: spellMsg = "Cast "+spellType+" spell [CA = defined on the spell]"]
		}]
		[h, if (spellType == "Spirit"),code:{
			[h: computedCastCA = 1]
			[h: spellMP = 1]
		}]
		[h: res=input(
			"junkVar|"+spellMP+"|MP spent |LABEL",
			"junkVar|"+computedCastCA+"|"+spellMsg+"|LABEL",
			"castCA|"+computedCastCA+"|Nb of CA to cast the spell|TEXT"
		)]
		[h: abort(res)]
		
		[h, if(isNumber(castCA) != 1), code: {
			[h: logMsg = strformat("%{logMsg} Invalid input for cast CA : %{castCA}<br>")]
			[h: addCombatLogEntry(tokenId,"proactiveAction",logMsg,"First cast has been cancelled. No CA lost")]
			[h: abort(0)]
		}]
 
		[h: "<!-- ask for result in order to compute lost MP -->"]
		[h: actionResult = askActionResult(tokenId,logMsg,actionLabel)]
		[h: actionResultType = json.get(actionResult,"actionResultType")]
		
		[h: logMsg = json.get(actionResult,"logMsg")]
		
		[h: isNotAborted = json.get(actionResult,"isNotAborted")]
		[h, if (isNotAborted), code:{
		};{
			[h: addCombatLogEntry(tokenId,"proactiveAction","First Cast.",logMsg)]
			[h: abort(0)]
		}]
		
		[h: "<!-- Adjust spent MP depending on the roll result -->"]

		[h, if ((spellType == "Common") && (actionResultType == "Failure")) : spellMP = 0 ]
		[h, if ((spellType == "Common") && (actionResultType == "Critical")) : spellMP = spellMP - 1 ]
		[h, if ((spellType == "Sorcery") && (actionResultType == "Failure")) : spellMP = 1 ]
		[h, if ((spellType == "Sorcery") && (actionResultType == "Critical")) : spellMP = 0 ]
		[h, if ((spellType == "Draconic") && (actionResultType == "Critical")) : spellMP = 0 ]
		[h, if ((spellType == "Draconic") && (actionResultType == "Failure")) : spellMP = 1 ]
		[h, if ((spellType == "Draconic") && (actionResultType == "Fumble")) : spellMP = 1 ]
		[h, if ((spellType == "Spirit") && (actionResultType == "Critical")) : spellMP = 0 ]
		[h, if ((spellType == "Spirit") && (actionResultType == "Failure")) : spellMP = 1 ]
		[h, if (spellType == "Divine") : spellMP = 0 ]
		
		[h: "<!-- update Current Magic Point -->"]
		
		[h: propMagicPoint = getProperty("MagicPoint",tokenId)]
		[h: baseMP = json.path.read(propMagicPoint,"MP.base")]
		[h: currMP = json.path.read(propMagicPoint,"MP.current")]
		[h: newCurrMP = currMP - spellMP]

    [h: logMsg = strformat("%{logMsg}<br>loose %{spellMP} magic points.")]

    [h: newPropMagicPoint = json.path.set(propMagicPoint,"MP.current",newCurrMP)]
    [h: setProperty("MagicPoint",newPropMagicPoint,tokenId)]
		
		[h, if ((actionResultType == "Failure") || (actionResultType == "Fumble")) : castCA = 1 ]
		[h: remainingCastCA = castCA - 1]
		[h: currentCombatStatus = json.set(currentCombatStatus,"castCA",remainingCastCA)]
		
    [h: remainingCA = activeCA - 1]
		[h: currentCombatStatus = json.set(currentCombatStatus,"activeCA",remainingCA)]
		[h: proactiveCA = proactiveCA + 1]
		[h: currentCombatStatus = json.set(currentCombatStatus,"proactiveCA",proactiveCA)]
		
		[h, if (remainingCA == 0): currentCombatStatus = json.set(currentCombatStatus,"turnStatus","out");currentCombatStatus = json.set(currentCombatStatus,"turnStatus","off")]
		[h, if (remainingCA == 0): setState("Out", 1, tokenId)]
		
		[h: "<!-- set activeTurn to 0 to indicate that token played is turn - mandatory (this is checked in onInitiativeChangeRequest -->"]
		[h: currentCombatStatus = json.set(currentCombatStatus,"activeTurn",0)]

    [h: spellReleaseStatus = "")]
		[h: isHolding = false]
		
		[h, if ((remainingCastCA == 0) && (actionResultType != "Failure") && (actionResultType != "Fumble")), code:{
		  [h: isHolding = input("junk|<html>Do you hold the spell ? <br>if yes, you must use <i>holdmagic</i> next turn.Click OK to hold.<br> Otherwise, click Cancel to release the spell now</html>|ignored|LABEL|SPAN=true")]
			[h: spellReleaseStatus = strformat("%{spellType} Spell has been released.")]
		 }]
		 
		[h, if (isHolding),code:{
			[h: currentCombatStatus = json.set(currentCombatStatus,"spellReady",1)]
			[h: spellReleaseStatus = strformat("%{spellType} Spell has been hold.")]
		}]
	
		[h, if ((remainingCastCA > 0) && (actionResultType != "Failure") && (actionResultType != "Fumble")),code:{
			[h: setState("Casting", 1, tokenId)]
			[h: spellReleaseStatus = strformat("Casting is started. %{spellType} Spell will be ready in %{remainingCastCA} CA.")]
			[h: logComment = strformat("Remaining Cast CA : %{remainingCastCA}")]
		}]
    
		[h: logMsg = strformat("%{logMsg}<br>%{spellReleaseStatus}")]
		[h: setProperty("combatStatus",currentCombatStatus,tokenId)]
	
  };
  case "pursueCast" : {
  	[h: castCA = json.get(currentCombatStatus,"castCA")]
    [h: remainingCastCA = castCA - 1]
  	[h: currentCombatStatus = json.set(currentCombatStatus,"castCA",remainingCastCA)]
  	[h: remainingCA = activeCA - 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeCA",remainingCA)]
    [h: proactiveCA = proactiveCA + 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"proactiveCA",proactiveCA)]
    
    [h, if (remainingCA == 0): currentCombatStatus = json.set(currentCombatStatus,"turnStatus","out");currentCombatStatus = json.set(currentCombatStatus,"turnStatus","off")]
    [h, if (remainingCA == 0): setState("Out", 1, tokenId)]
    [h, if (remainingCastCA == 0): setState("Casting", 0, tokenId)]


    [h: isHolding = false]
		[h: logMsg = "Pursue cast, spell has been released"]
    [h, if (remainingCastCA == 0): isHolding = input("junk|<html>Do you hold the spell ? <br>if yes, you must use <i>holdmagic</i> next turn.Click OK to hold.<br> Otherwise, click Cancel to release the spell now</html>|ignored|LABEL|SPAN=true")]
	[h, if (isHolding),code:{
	  [h: currentCombatStatus = json.set(currentCombatStatus,"spellReady",1)]
	  [h: logMsg = "Pursue cast, spell has been hold"]
	}]

    [h: currentCombatStatus = json.set(currentCombatStatus,"activeTurn",0)]
	
	[h, if (remainingCastCA > 0),code:{
    	[h: setState("Casting", 1, tokenId)]
    	[h: logMsg = "Pursue Cast, spell will be ready in "+remainingCastCA+ "CA"]
			[h: logComment = strformat("Remaining Cast CA : %{remainingCastCA}")]
    }]
    
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]

  };
  case "holdMagic" : {
  	[h: remainingCA = activeCA - 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeCA",remainingCA)]
    [h: proactiveCA = proactiveCA + 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"proactiveCA",proactiveCA)]
    
    [h, if (remainingCA == 0): currentCombatStatus = json.set(currentCombatStatus,"turnStatus","out");currentCombatStatus = json.set(currentCombatStatus,"turnStatus","off")]
    [h, if (remainingCA == 0): setState("Out", 1, tokenId)]
	
    [h: currentCombatStatus = json.set(currentCombatStatus,"spellReady",1)]

    [h: currentCombatStatus = json.set(currentCombatStatus,"activeTurn",0)]
    
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]

  };
  case "Shoot" : {
		[h: actionResult = askActionResult(tokenId,logMsg,actionLabel)]
		[h: logMsg = json.get(actionResult,"logMsg")]
		[h: isNotAborted = json.get(actionResult,"isNotAborted")]
		[h, if (isNotAborted), code:{
		};{
			[h: addCombatLogEntry(tokenId,"proactiveAction",logMsg,"No CA lost")]
			[h: abort(0)]
		}]
  	[h: res=input("reloadCA|1|Nb of CA to reload the weapon|TEXT")]
		
		[h, if (res == 0), code:{
		  [h: logMsg = strformat("%{logMsg} Shoot has been cancelled.")]
			[h: addCombatLogEntry(tokenId,"proactiveAction",logMsg,"No CA lost")]
			[h: abort(0)]
		}]
		
		[h, if(isNumber(reloadCA) != 1), code: {
			[h: logMsg = strformat("%{logMsg} Invalid input for reloadCA : %{reloadCA}<br>Shoot has been cancelled.")]
			[h: addCombatLogEntry(tokenId,"proactiveAction",logMsg,"No CA lost")]
			[h: abort(0)]
		}]
		
		
    [h: remainingReloadCA = reloadCA]
  	[h: currentCombatStatus = json.set(currentCombatStatus,"reloadCA",remainingReloadCA)]
  	[h: remainingCA = activeCA - 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeCA",remainingCA)]
    [h: proactiveCA = proactiveCA + 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"proactiveCA",proactiveCA)]
    
    [h, if (remainingCA == 0): currentCombatStatus = json.set(currentCombatStatus,"turnStatus","out");currentCombatStatus = json.set(currentCombatStatus,"turnStatus","off")]
    [h, if (remainingCA == 0): setState("Out", 1, tokenId)]

    [h: currentCombatStatus = json.set(currentCombatStatus,"activeTurn",0)]
		[h, if (reloadCA >0), code:{
      [h: setState("Reloading", 1, tokenId)]
			[h: logComment = strformat("%{logComment} Remaining reload CA : %{reloadCA}.")]
		}]
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]

  };
  case "Reload" : {
  	[h: reloadCA = json.get(currentCombatStatus,"reloadCA")]
    [h: remainingReloadCA = reloadCA - 1]
  	[h: currentCombatStatus = json.set(currentCombatStatus,"reloadCA",remainingReloadCA)]
  	[h: remainingCA = activeCA - 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeCA",remainingCA)]
    [h: proactiveCA = proactiveCA + 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"proactiveCA",proactiveCA)]
    
    [h, if (remainingCA == 0): currentCombatStatus = json.set(currentCombatStatus,"turnStatus","out");currentCombatStatus = json.set(currentCombatStatus,"turnStatus","off")]
    [h, if (remainingCA == 0): setState("Out", 1, tokenId)]
    [h, if (remainingReloadCA == 0),code:{
		  [h: setState("Reloading", 0, tokenId)]
			[h: logMsg = strformat("%{logMsg} Reload has been done. Ready to shoot for next CA.")]
		};{
		  [h: logMsg = strformat("%{logMsg} Reloading.")]
		  [h: logComment = strformat("%{logComment} Remaining reload CA : %{remainingReloadCA}.")]
		}]

    [h: currentCombatStatus = json.set(currentCombatStatus,"activeTurn",0)]
    
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]

  };
  default: {
 	  [h: "<!-- do nothing -->"]
 	  <br><b>[r: action]</b> is not implemented in <i>updateCombatProactive</i> !<br>
 }
]

[h: "<!-- log the action if it is not just a declaration -->"]
[h, if (action != "declareProactive"), code:{
  [h, if (logMsg == ""): logMsg = actionLabel]
  [h: logCombatAction(tokenId,"proactive",logMsg)]
  [h: logCombatAction(tokenId,"turnreset","")]
	
	[h: caStatus = json.get(currentCombatStatus,"activeCA")+"/"+json.get(currentCombatStatus,"ccCA")]
	[h: commentMsg = "Remaining CA :"+caStatus]
	[h: logComment = strformat("%{commentMsg}<br>%{logComment}")]
  
  [h, if (action == "changereach") : logMsg = logMsg + attLogMsg + defLogMsg]
  [h, if (action == "firstCast"), code:{
    [h: "<!-- We log also to the tokenLog -->"]
    [h: addCombatLogEntry(tokenId,"proactiveAction",logMsg,logComment,"1")]
  };{
    [h: addCombatLogEntry(tokenId,"proactiveAction",logMsg,logComment)]
  }]
};{
  [h: getName(tokenId)] is playing is turn and has declared : [h: logMsg]	
	[h: addCombatLogEntry(tokenId,"declareAction",logMsg,"")]
}]

[h: targetTokenId = tokenId]
[h, if(switchToNextToken), code:{
  [h: nextInitiative()]
  [h: targetTokenId = getInitiativeToken()]
  
  [r, if(isNPC(tokenId) && !isGM()), code: {
    [h: "<!-- Open next token Sheet for GM only-->"]
    [h: macroParam = json.set("{}", "tokenId", targetTokenId,"msg",logMsg,"tab","combat")]
    [h: lnkTxt = macroLinktext("openSheet@Lib:RQII", "all",macroParam)]
    [h: execLink(lnkTxt,0,"gm")]
    [h: goto(targetTokenId)]
  };{
    [h: "<!-- Open next token Sheet for All-->"]
    [h: macroParam = json.set("{}", "tokenId", targetTokenId,"msg",logMsg,"tab","combat")]
    [h: lnkTxt = macroLinktext("openSheet@Lib:RQII", "all",macroParam)]
    [h: execLink(lnkTxt,0,"all")]
    [h: goto(targetTokenId)]
  }]
  
}]

[h: execFunction("refreshCombatSheets", json.append("[]",cLogTokenId), 0, "all")]
 
[h, if(srcWindow == "openSheet"), code:{    
    [h: macroParam = json.set("{}", "tokenId", tokenId,"msg",logMsg,"tab","combat")]
    [h: lnkTxt = macroLinktext("openSheet@Lib:RQII", "all",macroParam)]
    [h: execLink(lnkTxt,0,"all")]
}]