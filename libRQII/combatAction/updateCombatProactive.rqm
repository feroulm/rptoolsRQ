<!-- Handle proactive action -->
[h: tokenId = json.get(macro.args, "tokenId")]
[h: action = json.get(macro.args, "action")]
[h: nextTokenId = json.get(macro.args, "nextTokenId")]
[h: nextTokenOffset = json.get(macro.args, "nextTokenOffset")]
<!-- for log management -->
[h: actionLabel = json.get(macro.args, "edit_btn")]
[h: logMsg = ""]

[h: currentCombatStatus = getProperty("combatStatus",tokenId)]
[h: activeCA = json.get(currentCombatStatus,"activeCA")]
[h: proactiveCA = json.get(currentCombatStatus,"proactiveCA")]
[h: reactiveCA = json.get(currentCombatStatus,"reactiveCA")]
[h: firstEvade = json.get(currentCombatStatus,"firstEvade")]
[h: chargeStatus = json.get(currentCombatStatus,"chargeStatus")]

[r, switch(action), code:
  case "parrydelayed" : {
 	[h: action = "attack"]
  };
  case "evadedelayed" : {
  	<!-- toggle evade one time on two -->
    [h, if (firstEvade == 0),code:{
    	[h: currentCombatStatus = json.set(currentCombatStatus,"firstEvade",1)]
    	[h: msg = "First "+actionLabel+" is done, next proactive CA lost."]
    	[h: logMsg = "First "+actionLabel]
    }]
    [h, if (firstEvade > 0),code:{
    	[h: currentCombatStatus = json.set(currentCombatStatus,"firstEvade",0)]
    	[h: msg = "Second "+actionLabel+" is done, proactive action possible next turn."]
    	[h: logMsg = "Second "+actionLabel]
    }]
 	[h: action = "attack"]
  };
  case "Outmanoeuvre" : {
  	[h: res = input("junk|Outmanoeuvre - Group opposed test of Evade skills are done ?|ignored|LABEL|SPAN=true")]
    [h: abort(res)]
  	[h: action = "attack"]
  };
  case "changeRange" : {
  	[h: res = input("junk|Change Range - Group opposed test of Evade skills is done ?|ignored|LABEL|SPAN=true")]
    [h: abort(res)]
  	[h: action = "attack"]
  };
  case "chargeCrash" : {
  	<!-- charge is finished -->
  	[h: currentCombatStatus = json.set(currentCombatStatus,"chargeStatus","none")]
  	[h: setState("Charging", 0, tokenId)]
 	[h: action = "attack"]
  };
  case "chargePassage": {
  	[h: currentCombatStatus = json.set(currentCombatStatus,"chargeStatus","passageDone")]
  	[h: action = "attack"]
  };
  case "chargePrepare": {
  	[h: currentCombatStatus = json.set(currentCombatStatus,"chargeStatus","prepareCharge")]
  	[h: setState("Charging", 1, tokenId)]
  	[h: action = "attack"]
  };
  case "regainFooting": {
  	[h: currentCombatStatus = json.set(currentCombatStatus,"situationMod","none")]
  	[h: setState("Prone", 0, tokenId)]
  	[h: action = "attack"]
  };  
  default: {
 	<!-- do nothing -->
  }
]

[r, switch(action), code:
  case "declareProactive" : {
  	[h: declaredAction = json.get(macro.args, "declaredAction")]
  	[h: actionTarget = json.get(macro.args, "actionTarget")]
  	[h: actionDesc = json.get(macro.args, "actionDesc")]
  	[h: logMsg = declaredAction+" "+actionTarget+" "+actionDesc]

  	[h: logCombatAction(tokenId,"turndeclare",logMsg)] 	
  	<!-- Refresh Action Window for the current token -->
    [h: macroParam = json.set("{}", "tokenId", tokenId)]
	[h: lnkTxt = macroLinktext("openCombatAction@Lib:RQII", "all",macroParam)]
    [h: execLink(lnkTxt,0,"all")]
  };
  case "attack" : {
    [h: remainingCA = activeCA - 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeCA",remainingCA)]
    [h: proactiveCA = proactiveCA + 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"proactiveCA",proactiveCA)]
    
    [h, if (remainingCA == 0): currentCombatStatus = json.set(currentCombatStatus,"turnStatus","out");currentCombatStatus = json.set(currentCombatStatus,"turnStatus","off")]
    [h, if (remainingCA == 0): setState("Out", 1, tokenId)]
    <!-- set activeTurn to 0 to indicate that token played is turn - mandatory (this is checked in onInitiativeChangeRequest -->
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeTurn",0)]
    
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]
  
    <!-- switch to next token -->
    [h: nextInitiative()]
    [h: newToken = getInitiativeToken()]
    <!-- Refresh Action Window for the new token -->
    [h: macroParam = json.set("{}", "tokenId", newToken)]
	[h: lnkTxt = macroLinktext("openCombatAction@Lib:RQII", "all",macroParam)]
    [h: execLink(lnkTxt,0,"all")]
  };
  case "chargeRiposte" : {
  	<!-- no done during active Turn -->
  	[h: remainingCA = activeCA - 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeCA",remainingCA)]
    [h: proactiveCA = proactiveCA + 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"proactiveCA",proactiveCA)]
    
    [h, if (remainingCA == 0): currentCombatStatus = json.set(currentCombatStatus,"turnStatus","out");currentCombatStatus = json.set(currentCombatStatus,"turnStatus","off")]
    [h, if (remainingCA == 0): setState("Out", 1, tokenId)]   
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]

    <!-- Refresh Action Window for the current token -->
    [h: macroParam = json.set("{}", "tokenId", tokenId)]
	[h: lnkTxt = macroLinktext("openCombatAction@Lib:RQII", "all",macroParam)]
    [h: execLink(lnkTxt,0,"all")]
  };
  case "delay" : {
    [h: currentCombatStatus = json.set(currentCombatStatus,"turnStatus","delay")]
    <!-- set activeTurn to 0 to indicate that token played is turn - mandatory (this is checked in onInitiativeChangeRequest -->
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeTurn",0)]
    
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]
    <!-- switch to next token -->
    [h: nextInitiative()]
    [h: newToken = getInitiativeToken()]
    <!-- Refresh Action Window for the new token -->
    [h: macroParam = json.set("{}", "tokenId", newToken)]
	[h: lnkTxt = macroLinktext("openCombatAction@Lib:RQII", "all",macroParam)]
    [h: execLink(lnkTxt,0,"all")]
  };
  case "firstCast" : {
    [h: res = input(
		"spellMP|1|Nb of Magic Point (MP) to cast the spell|TEXT",
		"spellType|Common,Sorcery,Divine,Draconic,Spirit|Spell Magic Type|LIST|SELECT=0 VALUE=STRING"
	)]
    
	<!-- Test remaining MP -->
	[h: propMagicPoint = getProperty("MagicPoint",tokenId)]
    [h: baseMP = json.path.read(propMagicPoint,"MP.base")]
    [h: currMP = json.path.read(propMagicPoint,"MP.current")]
	[h: newCurrMP = currMP - spellMP]

    [h: mpMsg = strformat("You have only %{currMP} left, you can't spent %{spellMP}. Reduce the magnitude of your speel or choose another action.")]
    [r: assert((newCurrMP >= 0),"<b>"+getName(tokenId)+"</b>: First Cast action failed ! <br>"+mpMsg,0)]

	[h: computedCastCA = 1]
	[h: spellMsg = "Cast "+spellType+" spell [CA = 1]"]
	[h, if (spellType == "Common"),code:{
		[h: computedCastCA = round(spellMP/2)]
		[h: spellMsg = "Cast "+spellType+" spell [CA = round up (MP/2)]"]
	}]
	[h, if (spellType == "Sorcery"),code:{
		[h: computedCastCA = spellMP]
		[h: spellMsg = "Cast "+spellType+" spell [CA = MP]"]
	}]
	[h, if (spellType == "Divine"): computedCastCA = 1 ]
	[h, if (spellType == "Draconic"),code:{
		[h: computedCastCA = "Change Me"]
		[h: spellMsg = "Cast "+spellType+" spell [CA = defined on the spell]"]
	}]
	[h, if (spellType == "Spirit"): computedCastCA = 1 ]
  	[h: input(
  		"junkVar|"+spellMP+"|MP spent |LABEL",
  		"junkVar|"+computedCastCA+"|"+spellMsg+"|LABEL",
  		"castCA|"+computedCastCA+"|Nb of CA to cast the spell|TEXT"
  	)]
  	[r, if(isNumber(castCA) != 1), code: {
 		 <b>Invalid input for cast CA : [r: castCA]</b>, castCA is set to 1<br>
 		 [h: castCA = 1]
	}]
    [h: remainingCastCA = castCA - 1]
  	[h: currentCombatStatus = json.set(currentCombatStatus,"castCA",remainingCastCA)]
  	[h: remainingCA = activeCA - 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeCA",remainingCA)]
    [h: proactiveCA = proactiveCA + 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"proactiveCA",proactiveCA)]
    
    [h, if (remainingCA == 0): currentCombatStatus = json.set(currentCombatStatus,"turnStatus","out");currentCombatStatus = json.set(currentCombatStatus,"turnStatus","off")]
    [h, if (remainingCA == 0): setState("Out", 1, tokenId)]
    <!-- set activeTurn to 0 to indicate that token played is turn - mandatory (this is checked in onInitiativeChangeRequest -->
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeTurn",0)]

    [h: isHolding = false]
	[h: logMsg = "First cast, spell has been released"]
    [h, if (remainingCastCA == 0): isHolding = input("junk|<html>Do you hold the spell ? <br>if yes, you must use <i>holdmagic</i> next turn.Click OK to hold.<br> Otherwise, click Cancel to release the spell now</html>|ignored|LABEL|SPAN=true")]
    [h, if (isHolding),code:{
	  [h: currentCombatStatus = json.set(currentCombatStatus,"spellReady",1)]
	  [h: logMsg = "First cast, spell has been hold"]
	}]
	
	[h, if (remainingCastCA > 0),code:{
    	[h: setState("Casting", 1, tokenId)]
    	[h: logMsg = "First cast, spell will be ready in "+remainingCastCA+ "CA"]
    }]
    
	[h: setProperty("combatStatus",currentCombatStatus,tokenId)]
	
	<!-- update Current Magic Point -->
	[h: propMagicPoint = getProperty("MagicPoint",tokenId)]
    [h: baseMP = json.path.read(propMagicPoint,"MP.base")]
    [h: currMP = json.path.read(propMagicPoint,"MP.current")]
	[h: newCurrMP = currMP - spellMP]

	[r: getName(tokenId)] loose [r: currMP - newCurrMP] magic points.<br>
	
    [h: newPropMagicPoint = json.path.set(propMagicPoint,"MP.current",newCurrMP)]
    [h: setProperty("MagicPoint",newPropMagicPoint,tokenId)]
   
    <!-- switch to next token -->
    [h: nextInitiative()]
    [h: newToken = getInitiativeToken()]
    <!-- Refresh Action Window for the new token -->
    [h: macroParam = json.set("{}", "tokenId", newToken)]
    [h: lnkTxt = macroLinktext("openCombatAction@Lib:RQII", "all",macroParam)]
    [h: execLink(lnkTxt,0,"all")]
  };
  case "pursueCast" : {
  	[h: castCA = json.get(currentCombatStatus,"castCA")]
    [h: remainingCastCA = castCA - 1]
  	[h: currentCombatStatus = json.set(currentCombatStatus,"castCA",remainingCastCA)]
  	[h: remainingCA = activeCA - 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeCA",remainingCA)]
    [h: proactiveCA = proactiveCA + 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"proactiveCA",proactiveCA)]
    
    [h, if (remainingCA == 0): currentCombatStatus = json.set(currentCombatStatus,"turnStatus","out");currentCombatStatus = json.set(currentCombatStatus,"turnStatus","off")]
    [h, if (remainingCA == 0): setState("Out", 1, tokenId)]
    [h, if (remainingCastCA == 0): setState("Casting", 0, tokenId)]


    [h: isHolding = false]
	[h: logMsg = "Pursue cast, spell has been released"]
    [h, if (remainingCastCA == 0): isHolding = input("junk|<html>Do you hold the spell ? <br>if yes, you must use <i>holdmagic</i> next turn.Click OK to hold.<br> Otherwise, click Cancel to release the spell now</html>|ignored|LABEL|SPAN=true")]
	[h, if (isHolding),code:{
	  [h: currentCombatStatus = json.set(currentCombatStatus,"spellReady",1)]
	  [h: logMsg = "Pursue cast, spell has been hold"]
	}]
    <!-- set activeTurn to 0 to indicate that token played is turn - mandatory (this is checked in onInitiativeChangeRequest -->
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeTurn",0)]
	
	[h, if (remainingCastCA > 0),code:{
    	[h: setState("Casting", 1, tokenId)]
    	[h: logMsg = "Pursue Cast, spell will be ready in "+remainingCastCA+ "CA"]
    }]
    
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]
    <!-- switch to next token -->
    [h: nextInitiative()]
    [h: newToken = getInitiativeToken()]
    <!-- Refresh Action Window for the new token -->
    [h: macroParam = json.set("{}", "tokenId", newToken)]
	[h: lnkTxt = macroLinktext("openCombatAction@Lib:RQII", "all",macroParam)]
    [h: execLink(lnkTxt,0,"all")]
  };
  case "holdMagic" : {
  	[h: remainingCA = activeCA - 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeCA",remainingCA)]
    [h: proactiveCA = proactiveCA + 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"proactiveCA",proactiveCA)]
    
    [h, if (remainingCA == 0): currentCombatStatus = json.set(currentCombatStatus,"turnStatus","out");currentCombatStatus = json.set(currentCombatStatus,"turnStatus","off")]
    [h, if (remainingCA == 0): setState("Out", 1, tokenId)]
	
    [h: currentCombatStatus = json.set(currentCombatStatus,"spellReady",1)]
    <!-- set activeTurn to 0 to indicate that token played is turn - mandatory (this is checked in onInitiativeChangeRequest -->
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeTurn",0)]
    
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]
    <!-- switch to next token -->
    [h: nextInitiative()]
    [h: newToken = getInitiativeToken()]
    <!-- Refresh Action Window for the new token -->
    [h: macroParam = json.set("{}", "tokenId", newToken)]
    [h: lnkTxt = macroLinktext("openCombatAction@Lib:RQII", "all",macroParam)]
    [h: execLink(lnkTxt,0,"all")]
  };
  case "Shoot" : {
  	[h: input("reloadCA|1|Nb of CA to reload the weapon|TEXT")]
    [h: remainingReloadCA = reloadCA]
  	[h: currentCombatStatus = json.set(currentCombatStatus,"reloadCA",remainingReloadCA)]
  	[h: remainingCA = activeCA - 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeCA",remainingCA)]
    [h: proactiveCA = proactiveCA + 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"proactiveCA",proactiveCA)]
    
    [h, if (remainingCA == 0): currentCombatStatus = json.set(currentCombatStatus,"turnStatus","out");currentCombatStatus = json.set(currentCombatStatus,"turnStatus","off")]
    [h, if (remainingCA == 0): setState("Out", 1, tokenId)]
    <!-- set activeTurn to 0 to indicate that token played is turn - mandatory (this is checked in onInitiativeChangeRequest -->
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeTurn",0)]
    [h: setState("Reloading", 1, tokenId)]
    
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]
    <!-- switch to next token -->
    [h: nextInitiative()]
    [h: newToken = getInitiativeToken()]
    <!-- Refresh Action Window for the new token -->
    [h: macroParam = json.set("{}", "tokenId", newToken)]
    [h: lnkTxt = macroLinktext("openCombatAction@Lib:RQII", "all",macroParam)]
    [h: execLink(lnkTxt,0,"all")]
  };
  case "Reload" : {
  	[h: reloadCA = json.get(currentCombatStatus,"reloadCA")]
    [h: remainingReloadCA = reloadCA - 1]
  	[h: currentCombatStatus = json.set(currentCombatStatus,"reloadCA",remainingReloadCA)]
  	[h: remainingCA = activeCA - 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeCA",remainingCA)]
    [h: proactiveCA = proactiveCA + 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"proactiveCA",proactiveCA)]
    
    [h, if (remainingCA == 0): currentCombatStatus = json.set(currentCombatStatus,"turnStatus","out");currentCombatStatus = json.set(currentCombatStatus,"turnStatus","off")]
    [h, if (remainingCA == 0): setState("Out", 1, tokenId)]
    [h, if (remainingReloadCA == 0): setState("Reloading", 0, tokenId)]
    <!-- set activeTurn to 0 to indicate that token played is turn - mandatory (this is checked in onInitiativeChangeRequest -->
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeTurn",0)]
    
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]
    <!-- switch to next token -->
    [h: nextInitiative()]
    [h: newToken = getInitiativeToken()]
	
    <!-- Refresh Action Window for the new token -->
    [h: macroParam = json.set("{}", "tokenId", newToken)]
    [h: lnkTxt = macroLinktext("openCombatAction@Lib:RQII", "all",macroParam)]
    [h: execLink(lnkTxt,0,"all")]
  };
  default: {
 	<!-- do nothing -->
 	<br><b>[r: action]</b> is not implemented in <i>updateCombatProactive</i> !<br>
 }
]

<!-- log the action if it is not just a declaration -->
[r, if (action != "declareProactive"), code:{
  [h, if (logMsg == ""): logMsg = actionLabel]
  [h: logCombatAction(tokenId,"proactive",logMsg)]
  [h: logCombatAction(tokenId,"turnreset","")]
  [r: getName(tokenId)] has done : [r: logMsg]
};{
  [r: getName(tokenId)] is playing is turn and has declared : [r: logMsg]	
}]

<!-- Refresh Combat Window -->
[h: macroParam = ""]
[h: lnkTxt = macroLinktext("openCombat@Lib:RQII", "all",macroParam)]
[h: execLink(lnkTxt,0,"all")]
[h: macroParam = json.set("{}", "tab", "main")]
[h: lnkTxt = macroLinktext("openCombatSheets@Lib:RQII", "all",macroParam)]
[h: execLink(lnkTxt,0,"all")]