<!-- Handle proactive action -->
[h: tokenId = json.get(macro.args, "tokenId")]
[h: action = json.get(macro.args, "action")]
[h: nextTokenId = json.get(macro.args, "nextTokenId")]
[h: nextTokenOffset = json.get(macro.args, "nextTokenOffset")]
<!-- for log management -->
[h: actionLabel = json.get(macro.args, "edit_btn")]
[h: logMsg = ""]

[h: currentCombatStatus = getProperty("combatStatus",tokenId)]
[h: activeCA = json.get(currentCombatStatus,"activeCA")]
[h: proactiveCA = json.get(currentCombatStatus,"proactiveCA")]
[h: reactiveCA = json.get(currentCombatStatus,"reactiveCA")]
[h: firstEvade = json.get(currentCombatStatus,"firstEvade")]



[r, switch(action), code:
  case "parrydelayed" : {
 	[h: action = "attack"]
  };
  case "evadedelayed" : {
  	<!-- toggle evade one time on two -->
    [h, if (firstEvade == 0),code:{
    	[h: currentCombatStatus = json.set(currentCombatStatus,"firstEvade",1)]
    	[h: msg = "First "+actionLabel+" is done, next proactive CA lost."]
    	[h: logMsg = "First "+actionLabel]
    }]
    [h, if (firstEvade > 0),code:{
    	[h: currentCombatStatus = json.set(currentCombatStatus,"firstEvade",0)]
    	[h: msg = "Second "+actionLabel+" is done, proactive action possible next turn."]
    	[h: logMsg = "Second "+actionLabel]
    }]
 	[h: action = "attack"]
  };
  case "Outmanoeuvre" : {
  	[h: res = input("junk|Outmanoeuvre - Group opposed test of Evade skills are done ?|ignored|LABEL|SPAN=true")]
    [h: abort(res)]
  	[h: action = "attack"]
  };
  case "changeRange" : {
  	[h: res = input("junk|Change Range - Group opposed test of Evade skills is done ?|ignored|LABEL|SPAN=true")]
    [h: abort(res)]
  	[h: action = "attack"]
  };
  default: {
 	<!-- do nothing -->
  }
]

[r, switch(action), code:
  case "declareProactive" : {
  	[h: declaredAction = json.get(macro.args, "declaredAction")]
  	[h: actionTarget = json.get(macro.args, "actionTarget")]
  	[h: actionDesc = json.get(macro.args, "actionDesc")]
  	[h: logMsg = declaredAction+" "+actionTarget+" "+actionDesc]

  	[h: logCombatAction(tokenId,"turndeclare",logMsg)] 	
  	<!-- Refresh Action Window for the current token -->
    [h: macroParam = json.set("{}", "tokenId", tokenId)]
    [r, macro("openCombatAction@Lib:RQII"): macroParam]
  };
  case "attack" : {
    [h: remainingCA = activeCA - 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeCA",remainingCA)]
    [h: proactiveCA = proactiveCA + 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"proactiveCA",proactiveCA)]
    
    [h, if (remainingCA == 0): currentCombatStatus = json.set(currentCombatStatus,"turnStatus","out");currentCombatStatus = json.set(currentCombatStatus,"turnStatus","off")]
    [h, if (remainingCA == 0): setState("Out", 1, tokenId)]
    <!-- set activeTurn to 0 to indicate that token played is turn - mandatory (this is checked in onInitiativeChangeRequest -->
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeTurn",0)]
    
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]
  
    <!-- switch to next token -->
    [h: nextInitiative()]
    [h: newToken = getInitiativeToken()]
    <!-- Refresh Action Window for the new token -->
    [h: macroParam = json.set("{}", "tokenId", newToken)]
    [r, macro("openCombatAction@Lib:RQII"): macroParam]
  };
  case "delay" : {
    [h: currentCombatStatus = json.set(currentCombatStatus,"turnStatus","delay")]
    <!-- set activeTurn to 0 to indicate that token played is turn - mandatory (this is checked in onInitiativeChangeRequest -->
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeTurn",0)]
    
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]
    <!-- switch to next token -->
    [h: nextInitiative()]
    [h: newToken = getInitiativeToken()]
    <!-- Refresh Action Window for the new token -->
    [h: macroParam = json.set("{}", "tokenId", newToken)]
    [r, macro("openCombatAction@Lib:RQII"): macroParam]
  };
  case "firstCast" : {
  	[h: input("castCA|1|Nb of CA to cast the spell|TEXT")]
    [h: remainingCastCA = castCA - 1]
  	[h: currentCombatStatus = json.set(currentCombatStatus,"castCA",remainingCastCA)]
  	[h: remainingCA = activeCA - 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeCA",remainingCA)]
    [h: proactiveCA = proactiveCA + 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"proactiveCA",proactiveCA)]
    
    [h, if (remainingCA == 0): currentCombatStatus = json.set(currentCombatStatus,"turnStatus","out");currentCombatStatus = json.set(currentCombatStatus,"turnStatus","off")]
    [h, if (remainingCA == 0): setState("Out", 1, tokenId)]
    <!-- set activeTurn to 0 to indicate that token played is turn - mandatory (this is checked in onInitiativeChangeRequest -->
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeTurn",0)]
    [h, if (remainingCastCA > 0): setState("Casting", 1, tokenId)]
    
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]
    <!-- switch to next token -->
    [h: nextInitiative()]
    [h: newToken = getInitiativeToken()]
    <!-- Refresh Action Window for the new token -->
    [h: macroParam = json.set("{}", "tokenId", newToken)]
    [r, macro("openCombatAction@Lib:RQII"): macroParam]
  };
  case "pursueCast" : {
  	[h: castCA = json.get(currentCombatStatus,"castCA")]
    [h: remainingCastCA = castCA - 1]
  	[h: currentCombatStatus = json.set(currentCombatStatus,"castCA",remainingCastCA)]
  	[h: remainingCA = activeCA - 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeCA",remainingCA)]
    [h: proactiveCA = proactiveCA + 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"proactiveCA",proactiveCA)]
    
    [h, if (remainingCA == 0): currentCombatStatus = json.set(currentCombatStatus,"turnStatus","out");currentCombatStatus = json.set(currentCombatStatus,"turnStatus","off")]
    [h, if (remainingCA == 0): setState("Out", 1, tokenId)]
    [h, if (remainingCastCA == 0): setState("Casting", 0, tokenId)]
    <!-- set activeTurn to 0 to indicate that token played is turn - mandatory (this is checked in onInitiativeChangeRequest -->
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeTurn",0)]
    
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]
    <!-- switch to next token -->
    [h: nextInitiative()]
    [h: newToken = getInitiativeToken()]
    <!-- Refresh Action Window for the new token -->
    [h: macroParam = json.set("{}", "tokenId", newToken)]
    [r, macro("openCombatAction@Lib:RQII"): macroParam]
  };
  case "Shoot" : {
  	[h: input("reloadCA|1|Nb of CA to reload the weapon|TEXT")]
    [h: remainingReloadCA = reloadCA]
  	[h: currentCombatStatus = json.set(currentCombatStatus,"reloadCA",remainingReloadCA)]
  	[h: remainingCA = activeCA - 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeCA",remainingCA)]
    [h: proactiveCA = proactiveCA + 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"proactiveCA",proactiveCA)]
    
    [h, if (remainingCA == 0): currentCombatStatus = json.set(currentCombatStatus,"turnStatus","out");currentCombatStatus = json.set(currentCombatStatus,"turnStatus","off")]
    [h, if (remainingCA == 0): setState("Out", 1, tokenId)]
    <!-- set activeTurn to 0 to indicate that token played is turn - mandatory (this is checked in onInitiativeChangeRequest -->
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeTurn",0)]
    [h: setState("Reloading", 1, tokenId)]
    
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]
    <!-- switch to next token -->
    [h: nextInitiative()]
    [h: newToken = getInitiativeToken()]
    <!-- Refresh Action Window for the new token -->
    [h: macroParam = json.set("{}", "tokenId", newToken)]
    [r, macro("openCombatAction@Lib:RQII"): macroParam]
  };
  case "Reload" : {
  	[h: reloadCA = json.get(currentCombatStatus,"reloadCA")]
    [h: remainingReloadCA = reloadCA - 1]
  	[h: currentCombatStatus = json.set(currentCombatStatus,"reloadCA",remainingReloadCA)]
  	[h: remainingCA = activeCA - 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeCA",remainingCA)]
    [h: proactiveCA = proactiveCA + 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"proactiveCA",proactiveCA)]
    
    [h, if (remainingCA == 0): currentCombatStatus = json.set(currentCombatStatus,"turnStatus","out");currentCombatStatus = json.set(currentCombatStatus,"turnStatus","off")]
    [h, if (remainingCA == 0): setState("Out", 1, tokenId)]
    [h, if (remainingReloadCA == 0): setState("Reloading", 0, tokenId)]
    <!-- set activeTurn to 0 to indicate that token played is turn - mandatory (this is checked in onInitiativeChangeRequest -->
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeTurn",0)]
    
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]
    <!-- switch to next token -->
    [h: nextInitiative()]
    [h: newToken = getInitiativeToken()]
    <!-- Refresh Action Window for the new token -->
    [h: macroParam = json.set("{}", "tokenId", newToken)]
    [r, macro("openCombatAction@Lib:RQII"): macroParam]
  };
  default: {
 	<!-- do nothing -->
 	<br>Unexistant action !<br>
 }
]

<!-- log the action if it is not just a declaration -->
[r, if (action != "declareProactive"), code:{
  [h, if (logMsg == ""): logMsg = actionLabel]
  [h: logCombatAction(tokenId,"proactive",logMsg)]
  [h: logCombatAction(tokenId,"turnreset","")]
  [r: getName(tokenId)] end its turn and has done : [r: logMsg]
};{
  [r: getName(tokenId)] is playing is turn and has declared : [r: logMsg]	
}]

<!-- Refresh Combat Window -->
[r, macro("openCombat@Lib:RQII"): ""]