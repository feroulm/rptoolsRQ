[h: arguments = macro.args]
[h: tokens = json.get(arguments, "tokens")]
[h: action = json.get(arguments, "action")]
[h: tokenIdCaller = json.get(arguments, "tokenId")]
[h, if(json.isEmpty(tokenIdCaller)) : tokenIdCaller = "none"]

[h: logMsg = ""]
[h: logComment = ""]

[h:"<!-- get current combat token -->"]
[h: cLogTokenId = findCurrentCombatToken()]

[h, if(cLogTokenId == "none" && action != "reset"), code:{
	[h: logDbgMsg = strformat("<i>combatAction::updateGlobalCombat</i> : there is no current combat token (cLogTokenId=%{cLogTokenId}). Create a combat first")]
  [h: log.debug(logDbgMsg)]
	[assert(0,logDbgMsg,0)]
};{	
	[h, if(action == "reset"),code:{
		[h: "<!-- we do not get combatProp since it can be none (non existant) -->"]
	};{
		[h: combatProp = getProperty("combat",cLogTokenId)]
	}]
}]

[r, switch(action), code:
  case "nxtcycle" : {
    [h: addCombatLogEntry(tokenIdCaller,"globalEvent","End the turn and start a new cycle.","")]
		
    [h, foreach(item, tokens, ""), code: {
      [h: tokenId = json.get(item, "tokenId")]
			[h: currentCombatStatus = getProperty("combatStatus",tokenId)]
	    [h: turnStatus = json.get(currentCombatStatus,"turnStatus")]
      [h, if(turnStatus == "delay"): currentCombatStatus = resetDelayedTurn(tokenId,currentCombatStatus)]
      [h: newLostProCA = json.get(currentCombatStatus,"lostProCA")]
      [h, if(newLostProCA > 0) : logComment = strformat("Remaining lostProCA : %{newLostProCA}")]
			[h: delayedLogMsg = "Delayed CA was not used and is lost, existing proactiveCA Malus is decreased and existing evade malus is removed<br>"]
			[h, if(turnStatus == "delay"): addCombatLogEntry(tokenId,"globalEvent",delayedLogMsg,logComment)]
			
			[h, if(turnStatus == "off"): currentCombatStatus = json.set(currentCombatStatus,"turnStatus","on")]
			[h: currentCombatStatus = json.set(currentCombatStatus,"activeTurn",0)]
			[h: setProperty("combatStatus",currentCombatStatus,tokenId)]	 
			[h: setState("CurrentTurn", 0, tokenId)]
    }]

		[h: cycleNb = json.get(combatProp, "cycle") + 1]
		[h: combatProp = json.set(combatProp,"cycle",cycleNb)]
		[h: setProperty("combat",combatProp,cLogTokenId)]	
		
		[h: msg = strformat("Cycle %{cycleNb} is starting")]
  };
  case "nxtmr" : {	
	  [h: addCombatLogEntry(tokenIdCaller,"globalEvent","End the turn and start a new MR.","")]
		
    [h, foreach(item, tokens, ""), code: {
      [h: tokenId = json.get(item, "tokenId")]
			[h: currentCombatStatus = getProperty("combatStatus",tokenId)]
			
			[h: ccCA = json.get(currentCombatStatus,"ccCA")]
			[h: currentCombatStatus = json.set(currentCombatStatus,"activeCA",ccCA)]
	
			[h: currentCombatStatus = json.set(currentCombatStatus,"proactiveCA",0)]
			[h: currentCombatStatus = json.set(currentCombatStatus,"reactiveCA",0)]
				
			[h: weaponReach = json.get(currentCombatStatus,"weaponReach")]
			[h, if(weaponReach == "outmanoeuvred"): currentCombatStatus = json.set(currentCombatStatus,"weaponReach","ok")]
			
			[h: turnStatus = json.get(currentCombatStatus,"turnStatus")]
			[h, if(turnStatus != "disabled"): currentCombatStatus = json.set(currentCombatStatus,"turnStatus","on")]
			[h: currentCombatStatus = json.set(currentCombatStatus,"activeTurn",0)]
	
			[h: chargeStatus = json.get(currentCombatStatus,"chargeStatus")]
			[h, if(chargeStatus == "prepareCharge"): currentCombatStatus = json.set(currentCombatStatus,"chargeStatus","chargeReady")]
			[h, if(chargeStatus == "passageDone"): currentCombatStatus = json.set(currentCombatStatus,"chargeStatus","none")]
			[h, if(chargeStatus == "passageDone"): setState("Charging", 0, tokenId)]
			
			[h: setProperty("combatStatus",currentCombatStatus,tokenId)]	 
			
			[h: setState("CurrentTurn", 0, tokenId)]
			[h: setState("Out", 0, tokenId)]
			[h: setState("Outmanoeuvred", 0, tokenId)]
    }]

		[h: combatProp = json.set(combatProp,"cycle",1)]
		
		[h: mrNb = json.get(combatProp, "mr") + 1]
		[h: combatProp = json.set(combatProp,"mr",mrNb)]
		[h: setProperty("combat",combatProp,cLogTokenId)]	
	
		[h: msg = strformat("MR %{mrNb} is starting")]
  };
  case "reset" : {
  	[h: res = input("junk|This will create a new combat, reset all CA value, cycle & mr Nb and reroll initiative. Are you sure?  Click OK to confirm.|ignored|LABEL|SPAN=true",
		"combatDesc|new combat|Combat short desc / nickname :")]
  	[h: abort(res)]
		
		[h: "<!-- create a new CombatLog token with cycle, mr, and initiRoll reset to 1 -->"]
		[h: cLogTokenId = createNewClogToken(combatDesc)]
    [h: addCombatLogEntry(cLogTokenId,"globalEvent","Combat : <i>"+combatDesc+"</i> is created","")]
		
    [r, foreach(item, tokens, ""), code: {
      [h: tokenId = json.get(item, "tokenId")]
			[h: currentCombatStatus = getProperty("combatStatus",tokenId)] 
			
			[h: "<!-- Reset currentCombatStatus -->"]
			[h: "<!-- 1st, bind it to new combatLog token -->"]
			[h: currentCombatStatus = json.set(currentCombatStatus,"cLogTokenId",cLogTokenId)]
	
			[h: "<!-- then set everything to default / 0 before recomputing some values -->"]
			[h: currentCombatStatus = json.set(currentCombatStatus,"proactiveCA",0)]
			[h: currentCombatStatus = json.set(currentCombatStatus,"reactiveCA",0)]
			[h: currentCombatStatus = json.set(currentCombatStatus,"castCA",0)]
			[h: currentCombatStatus = json.set(currentCombatStatus,"reloadCA",0)]
			[h: currentCombatStatus = json.set(currentCombatStatus,"firstEvade",0)]
			[h: currentCombatStatus = json.set(currentCombatStatus,"weaponReach","ok")]
			[h: currentCombatStatus = json.set(currentCombatStatus,"lostProCA",0)]
			[h: currentCombatStatus = json.set(currentCombatStatus,"lostCA",0)]
			[h: currentCombatStatus = json.set(currentCombatStatus,"turnStatus","on")]
			[h: currentCombatStatus = json.set(currentCombatStatus,"activeTurn",0)]
			[h: currentCombatStatus = json.set(currentCombatStatus,"chargeStatus","none")]
			[h: currentCombatStatus = json.set(currentCombatStatus,"situationMod","none")]
			[h: currentCombatStatus = json.set(currentCombatStatus,"spellReady",0)]
			
			[h: "<!-- reset weapon CA-->"]
			[h: defWeaponNb = json.get(currentCombatStatus,"defWeaponNb")]
			[h: currentCombatStatus = json.set(currentCombatStatus,"currWeaponNb",defWeaponNb)]
			[h: newWeaponCA = defWeaponNb - 1]
			[h: currentCombatStatus = json.set(currentCombatStatus,"weaponCA",newWeaponCA)]
			
			[h: "<!-- recompute ccA -->"]
			[h: baseCA = json.get(currentCombatStatus,"baseCA")]
			[h: bonusCA = json.get(currentCombatStatus,"bonusCA")]
			[h: magicCA = json.get(currentCombatStatus,"magicCA")]
				
			[h: ccCA = baseCA + bonusCA + newWeaponCA + magicCA]
			[h: currentCombatStatus = json.set(currentCombatStatus,"activeCA",ccCA)]
			[h: currentCombatStatus = json.set(currentCombatStatus,"ccCA",ccCA)]
	
			[h: setProperty("combatStatus",currentCombatStatus,tokenId)]	
			
			[h: "<!-- reset All Token Log -->"]
			[h: logCombatAction(tokenId,"reset","")]
			
			[h: "<!-- reset All States -->"]
			[h: setAllStates(0, tokenId)]
			[h: setInitiativeHold(0,tokenId)]
			
			[h: "<!-- roll Initiative -->"]
			[h: propStrikeRank = getProperty("StrikeRank",tokenId)]
			[h: currentSR = json.get(propStrikeRank, "current")]
			
			[h: diceRoll = roll(1,1d10)]
			[h: initiative = diceRoll+currentSR]
			
			[h: logMsg = strformat("Rolled Initiative = <b>%{initiative}</b> : diceRoll (%{diceRoll}) + currentSR(%{currentSR})<br>")]
			[h: addCombatLogEntry(tokenId,"globalEvent",logMsg,"")]
			
			[h: setInitiative(initiative,tokenId)]
			[h: sortInitiative()]
    }]
    [h: msg = strformat("Combat <b>%{combatDesc}</b> is set & initiative is rolled !<br>")]
		[h: combatProp = getProperty("combat",cLogTokenId)]
  };
  case "rollinit" : {
    [h: "<!-- add a test - can only happen before a new MR -->"]
    [h, foreach(item, tokens, ""), code: {
      [h: tokenId = json.get(item, "tokenId")]

			[h: currentCombatStatus = getProperty("combatStatus",tokenId)]
			[h: setState("CurrentTurn", 0, tokenId)]
			[h: setProperty("combatStatus",json.set(currentCombatStatus,"activeTurn",0),tokenId)]
			
			[h: "<!-- to do : compute SR base on current DEx & INt vlue and wether the token has armour penalty or not -->"]
			
			[h: propStrikeRank = getProperty("StrikeRank",tokenId)]
			[h: currentSR = json.get(propStrikeRank, "current")]
			
			[h: diceRoll = roll(1,1d10)]
			[h: initiative = diceRoll+currentSR]
			[h: logMsg = strformat("Rolled Initiative = <b>%{initiative}</b> : diceRoll (%{diceRoll}) + currentSR(%{currentSR})<br>")]
			[h: addCombatLogEntry(tokenId,"globalEvent",logMsg,"")]

			[h: setInitiative(initiative,tokenId)]
			[h: sortInitiative()]
    }] 
    
		[h: initRoll = json.get(combatProp, "initRoll") + 1]
		[h: combatProp = json.set(combatProp,"initRoll",initRoll)]
		[h: setProperty("combat",combatProp,cLogTokenId)]	
	
		[h: msg = "Initiative rolled."]
  };
  default: {
 	<br><b>[r: action]</b> is not implemented in <i>updateGlobalCombat</i> !<br>
  }
]
[h: "<!-- Each time we roll initiative, change cycle or change mr we focus on the token with highest SR -->"]
[h: "<!-- select the token with the highest SR and set activeTurn to 1 -->"]

[h: initList = getInitiativeList()]
[h: firstToken = json.path.read(initList, "tokens.[0].tokenId")]
[h: firstTokenName = getName(firstToken)]
  
[h: logMsg = strformat("%{msg} %{firstTokenName} will start first.")]
[h: addCombatLogEntry(firstToken,"globalEvent",logMsg,"")]
 
[h: currentCombatStatus = getProperty("combatStatus",firstToken)]
[h: setProperty("combatStatus",json.set(currentCombatStatus,"activeTurn",1),firstToken)]
[h: setState("CurrentTurn", 1, firstToken)]
[h: setCurrentInitiative(0)]
  
[h: "<!-- Refresh Combat Action & Combat Window -->"]

[h: macroParam = json.set("{}", "tokenId", firstToken,"msg",msg)]
[h: lnkTxt = macroLinktext("openCombatAction@Lib:RQII", "all",macroParam)]
[h: execLink(lnkTxt,0,"all")]

[h: macroParam = json.set("{}", "tab", "main","cLogTokenId", cLogTokenId)]
[h: lnkTxt = macroLinktext("openCombatSheets@Lib:RQII", "all",macroParam)]
[h: execLink(lnkTxt,0,"all")]