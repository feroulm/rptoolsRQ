[h: tokens = json.get(macro.args, "tokens")]
[h: action = json.get(macro.args, "action")]

[r, switch(action), code:
  case "nxtcycle" : {
    [r, foreach(item, tokens, ""), code: {
      [h: tokenId = json.get(item, "tokenId")]
	  [h: currentCombatStatus = getProperty("combatStatus",tokenId)]
	  
	  [h: turnStatus = json.get(currentCombatStatus, "turnStatus")]
	  [h, if(turnStatus == "delay")]: currentCombatStatus = resetDelayedTurn(tokenId,currentCombatStatus)]
  	  [h, if(turnStatus == "off")]: currentCombatStatus = json.set(currentCombatStatus,"turnStatus","on")]
	  
	  [h: setProperty("combatStatus",currentCombatStatus,tokenId)]	  
    }]
	<!-- Increment Cycle Number -->
  };
  case "rollinit" : {
    <!-- add a test - can only happen if no remaining CA left for the cycle -->
    [r, foreach(item, tokens, ""), code: {
      [h: tokenId = json.get(item, "tokenId")]
      <!-- reset activeTurn to 0 -->
	  [h: currentCombatStatus = getProperty("combatStatus",tokenId)]
	  [h: setState("CurrentTurn", 0, tokenId)]
	  [h: setProperty("combatStatus",json.set(currentCombatStatus,"activeTurn",0),tokenId)]
	  <!-- to do : compute SR base on current DEx & INt vlue and wether the token has armour penalty or not -->
	  [h: currentSR = getProperty("SR",tokenId)]
	  <!-- roll Initiative -->
  	  [h: setInitiative(1d10+currentSR,tokenId)]
	  [h: sortInitiative()]
    }] 
 };
]

<!-- select the token with the highest SR and set activeTurn to 1 -->
[h: initList = getInitiativeList()]
[h: firstToken = json.path.read(initList, "tokens.[0].tokenId")]
  
[r: getName(firstToken)] will start first.
 
[h: currentCombatStatus = getProperty("combatStatus",firstToken)]
[h: setProperty("combatStatus",json.set(currentCombatStatus,"activeTurn",1),firstToken)]
[h: setState("CurrentTurn", 1, firstToken)]
[h: setCurrentInitiative(0)]
  
<!-- Refresh / Open Combat Action Window for current Active Token-->
[h: macroParam = json.set("{}", "id", firstToken,"msg","Initiative rolled, First to act")]
[r, macro("openCombatAction@Lib:RQII"): macroParam]
<!-- Refresh Combat Window -->
[r, macro("openCombat@Lib:RQII"): ""]