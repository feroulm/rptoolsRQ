[h: tokens = json.get(macro.args, "tokens")]
[h: action = json.get(macro.args, "action")]
[h: globalCombat = getLibProperty("combat", "Lib:RQII")]

[r, switch(action), code:
  case "nxtcycle" : {
  	<!-- TO DO can only be launch if no turn status is on -->
    [r, foreach(item, tokens, ""), code: {
      [h: tokenId = json.get(item, "tokenId")]
	  [h: currentCombatStatus = getProperty("combatStatus",tokenId)]
	  [h: turnStatus = json.get(currentCombatStatus,"turnStatus")]
	  [r, if(turnStatus == "delay"): getName(tokenId)+": Delayed CA was not used and is lost, existing proactiveCA Malus is decreased and existing evade malus is removed<br>"]
	  [h, if(turnStatus == "delay"): currentCombatStatus = resetDelayedTurn(tokenId,currentCombatStatus)]
	  [h, if(turnStatus == "off"): currentCombatStatus = json.set(currentCombatStatus,"turnStatus","on")]
	  [h: currentCombatStatus = json.set(currentCombatStatus,"activeTurn",0)]
	  [h: setProperty("combatStatus",currentCombatStatus,tokenId)]	 
	  [h: setState("CurrentTurn", 0, tokenId)]
    }]
	<!-- Increment Cycle Number -->
	[h: cycleNb = json.get(globalCombat, "cycle") + 1]
	[h: globalCombat = json.set(globalCombat,"cycle",cycleNb)]
	[h: setLibProperty("combat",globalCombat,"Lib:RQII")]
	Cycle [r: cycleNb] is starting.<br>	
	[h: msg = "New Cycle, First to act"]
  };
  case "nxtmr" : {
  	<!-- All activeCa are reset to ccCA,  	
  	proactiveCA & reactiveCa are reset to 0, 
  	castCa & fumble lost CA are no reset they go other multiple round,
  	all turnStatus (but disabled) are reset to on and activeTurn to 0 -->
  	
  	<!-- TO DO can only be launch if all turn status are either disable or out -->
  	
    [r, foreach(item, tokens, ""), code: {
      [h: tokenId = json.get(item, "tokenId")]
	  [h: currentCombatStatus = getProperty("combatStatus",tokenId)]
	  
	  [h: ccCA = json.get(currentCombatStatus,"ccCA")]
	  [h: currentCombatStatus = json.set(currentCombatStatus,"activeCA",ccCA)]

	  [h: currentCombatStatus = json.set(currentCombatStatus,"proactiveCA",0)]
	  [h: currentCombatStatus = json.set(currentCombatStatus,"reactiveCA",0)]
      
      [h: weaponReach = json.get(currentCombatStatus,"weaponReach")]
      [h, if(weaponReach == "outmanoeuvred"): currentCombatStatus = json.set(currentCombatStatus,"weaponReach","ok")]
	  
	  [h: turnStatus = json.get(currentCombatStatus,"turnStatus")]
	  [h, if(turnStatus != "disabled"): currentCombatStatus = json.set(currentCombatStatus,"turnStatus","on")]
	  [h: currentCombatStatus = json.set(currentCombatStatus,"activeTurn",0)]
	  [h: setProperty("combatStatus",currentCombatStatus,tokenId)]	 
	  
	  <!-- reset States -->
	  [h: setState("CurrentTurn", 0, tokenId)]
	  [h: setState("Out", 0, tokenId)]
	  [h: setState("Outmanoeuvred", 0, tokenId)]

    }]
    <!-- Reset Cycle Number -->
    [h: globalCombat = json.set(globalCombat,"cycle",1)]
	<!-- Increment MR Number -->
	[h: mrNb = json.get(globalCombat, "mr") + 1]
	[h: globalCombat = json.set(globalCombat,"mr",mrNb)]
	[h: setLibProperty("combat",globalCombat,"Lib:RQII")]
	MR [r: mrNb] is starting.<br>	
	[h: msg = "New MR, First to act"]
  };
  case "reset" : {
  	[h: res = input("junk|This will reset all CA value, cycle & mr Nb and reroll initiative. Are you sure?  Click OK to confirm.|ignored|LABEL|SPAN=true")]
  	[h: abort(res)]
    <!-- reset everything and reroll initiative -->
    [h: globalCombat = json.set(globalCombat,"cycle",1)]
    [h: globalCombat = json.set(globalCombat,"mr",1)]
    [h: globalCombat = json.set(globalCombat,"initRoll",1)]
    [h: setLibProperty("combat",globalCombat,"Lib:RQII")]
    [r, foreach(item, tokens, ""), code: {
      [h: tokenId = json.get(item, "tokenId")]
	  [h: currentCombatStatus = getProperty("combatStatus",tokenId)] 

	  [h: currentCombatStatus = json.set(currentCombatStatus,"proactiveCA",0)]
	  [h: currentCombatStatus = json.set(currentCombatStatus,"reactiveCA",0)]
	  [h: currentCombatStatus = json.set(currentCombatStatus,"castCA",0)]
	  [h: currentCombatStatus = json.set(currentCombatStatus,"reloadCA",0)]
	  [h: currentCombatStatus = json.set(currentCombatStatus,"firstEvade",0)]
	  [h: currentCombatStatus = json.set(currentCombatStatus,"weaponReach","ok")]
	  [h: currentCombatStatus = json.set(currentCombatStatus,"lostProCA",0)]
	  [h: currentCombatStatus = json.set(currentCombatStatus,"lostCA",0)]
	  [h: currentCombatStatus = json.set(currentCombatStatus,"turnStatus","on")]
	  [h: currentCombatStatus = json.set(currentCombatStatus,"activeTurn",0)]
	  <!-- reset weapon CA-->
	  [h: defWeaponNb = json.get(currentCombatStatus,"defWeaponNb")]
	  [h: currentCombatStatus = json.set(currentCombatStatus,"currWeaponNb",defWeaponNb)]
	  [h: newWeaponCA = defWeaponNb - 1]
	  [h: currentCombatStatus = json.set(currentCombatStatus,"weaponCA",newWeaponCA)]
	  <!-- recompute ccA -->
	  [h: baseCA = json.get(currentCombatStatus,"baseCA")]
      [h: bonusCA = json.get(currentCombatStatus,"bonusCA")]
      [h: magicCA = json.get(currentCombatStatus,"magicCA")]
      
	  [h: ccCA = baseCA + bonusCA + newWeaponCA + magicCA]
	  [h: currentCombatStatus = json.set(currentCombatStatus,"activeCA",ccCA)]
	  [h: currentCombatStatus = json.set(currentCombatStatus,"ccCA",ccCA)]

	  [h: setProperty("combatStatus",currentCombatStatus,tokenId)]	
	  <!-- reset All Log -->
	  [h: logCombatAction(tokenId,"reset","")]
	  
	  <!-- reset All States -->
	  [h: setAllStates(0, tokenId)]
	  [h: setInitiativeHold(0,tokenId)]
	  <!-- roll Initiative -->
	  [h: currentSR = getProperty("SR",tokenId)]
  	  [h: setInitiative(1d10+currentSR,tokenId)]
	  [h: sortInitiative()]
    }]
    [h: msg = "Initiative rolled, First to act"]
	Combat is set (or reset) & initiative is rolled !<br>
  };
  case "rollinit" : {
    <!-- add a test - can only happen before a new MR -->
    [r, foreach(item, tokens, ""), code: {
      [h: tokenId = json.get(item, "tokenId")]
      <!-- reset activeTurn to 0 -->
	  [h: currentCombatStatus = getProperty("combatStatus",tokenId)]
	  [h: setState("CurrentTurn", 0, tokenId)]
	  [h: setProperty("combatStatus",json.set(currentCombatStatus,"activeTurn",0),tokenId)]
	  <!-- to do : compute SR base on current DEx & INt vlue and wether the token has armour penalty or not -->
	  [h: currentSR = getProperty("SR",tokenId)]
	  <!-- roll Initiative -->
  	  [h: setInitiative(1d10+currentSR,tokenId)]
	  [h: sortInitiative()]
    }] 
    <!-- Increment Init Roll Number -->
	[h: initRoll = json.get(globalCombat, "initRoll") + 1]
	[h: globalCombat = json.set(globalCombat,"initRoll",initRoll)]
	[h: setLibProperty("combat",globalCombat,"Lib:RQII")]
	[r: initRoll] serie of initiative rolls is done.
	[h: msg = "Initiative rolled, First to act"]
  };
]
<!-- Each time we roll initiative, change cycle or change mr we focus on the token with highest SR -->
<!-- select the token with the highest SR and set activeTurn to 1 -->
[h: initList = getInitiativeList()]
[h: firstToken = json.path.read(initList, "tokens.[0].tokenId")]
  
[r: getName(firstToken)] will start first.
 
[h: currentCombatStatus = getProperty("combatStatus",firstToken)]
[h: setProperty("combatStatus",json.set(currentCombatStatus,"activeTurn",1),firstToken)]
[h: setState("CurrentTurn", 1, firstToken)]
[h: setCurrentInitiative(0)]
  
<!-- Refresh / Open Combat Action Window for current Active Token-->
[h: macroParam = json.set("{}", "tokenId", firstToken,"msg",msg)]
[r, macro("openCombatAction@Lib:RQII"): macroParam]
<!-- Refresh Combat Window -->
[r, macro("openCombat@Lib:RQII"): ""]