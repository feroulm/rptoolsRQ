[h: tokenId = json.get(macro.args, "tokenId")]
[h: action = json.get(macro.args, "action")]
[h: nextTokenId = json.get(macro.args, "nextTokenId")]
[h: nextTokenOffset = json.get(macro.args, "nextTokenOffset")]

[h: cLogTokenId = "none"]
[h: cLogTokenId = json.get(macro.args,"cLogTokenId")]
[h, if(json.isEmpty(cLogTokenId)) : cLogTokenId = "none"]

[h: actionLabel = json.get(macro.args, "edit_btn")]

[h: logMsg = ""]
[h: logComment = ""]
[h: msg = ""]

[h: "<!-- some action can refresh another token and will change this value -->"]
[h: refreshTokenId = tokenId]


[h: currentCombatStatus = getProperty("combatStatus",tokenId)]

[r, switch(action), code:
  case "disable" : {
    [h: currentCombatStatus = json.set(currentCombatStatus,"turnStatus","disabled")] 

    [h: currentCombatStatus = json.set(currentCombatStatus,"activeCA",0)]
    [h: currentCombatStatus = json.set(currentCombatStatus,"castCA",0)]
    [h: currentCombatStatus = json.set(currentCombatStatus,"proactiveCA",0)]
    [h: currentCombatStatus = json.set(currentCombatStatus,"reactiveCA",0)]

    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]
    [h: setState("Out", 0, tokenId)]
    [h: setState("Disabled", 1, tokenId)]

    [h: initiative = getInitiative(tokenId)]
    [h: setInitiativeHold(initiative, tokenId)]

    [h: msg = "Token is disabled."]
		[h: logMsg = msg]
  };
  case "enable" : {
  	[h: "<!-- when disabled, token always came back into fight as out and can act only after next mr event-->"]
    [h: turnStatus = json.get(currentCombatStatus,"turnStatus")]
    [h: currentCombatStatus = json.set(currentCombatStatus,"turnStatus","out")]
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]
    
    [h: setState("Disabled", 0, tokenId)]
    [h: setState("Out", 1, tokenId)]
    [h: setInitiativeHold(0,tokenId)]

    [h: msg = "Token is re-enabled."]
		[h: logMsg = msg]
  };
  case "nxtturn" : {
    [h: "<!-- set activeTurn to 0 to indicate that token played is turn - mandatory (this is checked in onInitiativeChangeRequest -->"]
    [h: setState("CurrentTurn", 0, tokenId)]
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeTurn",0)]
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]
    
		[h: "<!-- switch to next token with turnStatus == on (so it is not necessarly the consecutive token) -->"]
    [h: setState("CurrentTurn", 1, nextTokenId)]
    [h: nextCombatStatus = getProperty("combatStatus",nextTokenId)]
    [h: nextCombatStatus = json.set(nextCombatStatus,"activeTurn",1)]
    [h: setProperty("combatStatus",nextCombatStatus,nextTokenId)]
    [h: setCurrentInitiative(nextTokenOffset)]

    [h: msg = "Direct switch from"+getName(tokenId)]
		
    [h: refreshTokenId = nextTokenId]
		[h: logMsg = "no CA left. Switch to "+getName(nextTokenId)+"."]
  };
  case "outmanoeuvred" : {
  	[h: "<!-- when outmanoeuvred, token cannot attack nor take proactive action for this MR -->"]
    [h: currentCombatStatus = json.set(currentCombatStatus,"weaponReach","outmanoeuvred")]
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]
    
    [h: setState("Outmanoeuvred", 1, tokenId)]
    
    [h: logMsg = "Token is outmanoeuvred."]
    [h: logCombatAction(tokenId,"change",logMsg)]

    [h: msg = logMsg]
  };
  case "outranged" : {
  	[h: "<!-- when outranged, token cannot only attack the weapon or limb -->"]
    [h: currentCombatStatus = json.set(currentCombatStatus,"weaponReach","outranged")]
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]
    
    [h: setState("Outranged", 1, tokenId)]
    
    [h: logMsg = "Token is outranged"]
    [h: logCombatAction(tokenId,"change",logMsg)]

    [h: msg = "Token is out ranged and can only attack the opponent weapon or limb.<br>"]
  };
  case "closed" : {
  	[h: "<!-- when closed, token cannot parry and only attack with 1d3 dmg -->"]
    [h: currentCombatStatus = json.set(currentCombatStatus,"weaponReach","closed")]
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]
    
    [h: setState("Closed", 1, tokenId)]
    
    [h: logMsg = "Token is closed"]
    [h: logCombatAction(tokenId,"change",logMsg)]

    [h: msg = "Token is closed, attack is limited to 1d3 dmg and parry is not possible.<br>"]
  };
  case "delreachmalus" : {
  	[h: "<!-- remove outmanoeuvred, closed or outranged status -->"]
  	[h: previousMalus = json.get(currentCombatStatus,"weaponReach")]
    [h: currentCombatStatus = json.set(currentCombatStatus,"weaponReach","ok")]
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]

    [h, switch(previousMalus):
      case "outmanoeuvred": setState("Outmanoeuvred", 0, tokenId);
      case "outranged" : setState("Outranged", 0, tokenId);
      case "closed": setState("Closed", 0, tokenId);
    ]
    
    [h: logMsg = "Remove "+previousMalus]
    [h: logCombatAction(tokenId,"change",logMsg)]

    [h: msg = "Token is no more "+previousMalus]
    [h: actionLabel = logMsg]
  };
  case "delprone" : {
    [h: currentCombatStatus = json.set(currentCombatStatus,"situationMod","none")]
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]
    
    [h: setState("Prone", 0, tokenId)]
    
    [h: logMsg = "Token prone status is removed."]
    [h: logCombatAction(tokenId,"change",logMsg)]

    [h: msg = "Token is no more prone !"]
  };
  case "prone" : {
    [h: currentCombatStatus = json.set(currentCombatStatus,"situationMod","prone")]
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]
    
    [h: setState("Prone", 1, tokenId)]
    
    [h: logMsg = "Token is prone."]
    [h: logCombatAction(tokenId,"change",logMsg)]

    [h: msg = "Token just get prone !"]
  };
  case "releaseSpell" : {
  	[h: "<!-- when holdmagic was used,  spell can be released at no cost -->"]
    [h: currentCombatStatus = json.set(currentCombatStatus,"spellReady",0)]
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]
   
    [h: logMsg = actionLabel]
    [h: logCombatAction(tokenId,"change",logMsg)]

    [h: msg = "Spell has been released !"]
  };
  case "dismissMagic" : {
  	[h: "<!-- remove any remainingCastCA. -->"]
    [h: currentCombatStatus = json.set(currentCombatStatus,"castCA",0)]
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]

    [h: logMsg = actionLabel]
    [h: logCombatAction(tokenId,"change",logMsg)]

    [h: msg = "Spell has been dismissed !"]
  };
  default: {
 	<br><b>[r: action]</b> is not implemented in <i>updateCombat</i> !<br>
  }
]

[h: addCombatLogEntry(tokenId,"changeAfterAction",logMsg,logComment)]

[h: "<!-- Refresh Action Window for the new token -->"]
[h: macroParam = json.set("{}", "tokenId", refreshTokenId,"msg",msg,"cLogTokenId", cLogTokenId)]
[h: lnkTxt = macroLinktext("openCombatAction@Lib:RQII", "all",macroParam)]
[h: execLink(lnkTxt,0,"all")]

[h: "<!-- Refresh Combat Window -->"]
[h: macroParam = json.set("{}", "tab", "main","cLogTokenId", cLogTokenId)]
[h: lnkTxt = macroLinktext("openCombatSheets@Lib:RQII", "all",macroParam)]
[h: execLink(lnkTxt,0,"all")]