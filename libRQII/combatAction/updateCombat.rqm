[h: tokenId = json.get(macro.args, "tokenId")]
[h: action = json.get(macro.args, "action")]
[h: nextTokenId = json.get(macro.args, "nextTokenId")]
[h: nextTokenOffset = json.get(macro.args, "nextTokenOffset")]

[h: cLogTokenId = "none"]
[h: cLogTokenId = json.get(macro.args,"cLogTokenId")]
[h, if(json.isEmpty(cLogTokenId)) : cLogTokenId = "none"]

[h: actionLabel = json.get(macro.args, "actionLabel")]

[h: srcWindow = json.get(macro.args, "srcWindow")]
[h, if(json.isEmpty(srcWindow)): srcWindow = "none"]

[h: logMsg = ""]
[h: logComment = ""]
[h: msg = ""]

[h: tokenName = getName(tokenId)]

[h: "<!-- some action can refresh another token and will change this value -->"]
[h: refreshTokenId = tokenId]



[h: currentCombatStatus = getProperty("combatStatus",tokenId)]
[h: "<!-- Grab list of opponent from weaponReach for action Owner (tokenId) -->"]
[h: weaponReach = json.get(currentCombatStatus,"weaponReach")]
[h: "<!-- reset to a jsonArray (this to support not yet migrated token with previous usage of weaponReach -->"]
[h, if (json.type(weaponReach) != "ARRAY") : weaponReach = '[]']

[r, switch(action), code:
  case "disable" : {
    [h: inputStr = strformat("tip|Disabling and / or remove token from the combat)||LABEL|SPAN=TRUE")]
    [h: inputStr = json.append(inputStr, strformat("disableOption|Disable and remove from combat,Disable but keep in combat,Remove from combat without disabling|<html>Choose :</html>|RADIO|VALUE=NUMBER ORIENT=V SELECT=0"))]
    [h: abort(input(json.toList(inputStr,"##")))] 
    
    [h: fctResult = removeTokenFromWeaponReach(tokenId)]
    [h: "<!-- We grab combatStatus again , because it was modified by removeTokenFromWeaponreach -->"]
    [h: currentCombatStatus = getProperty("combatStatus",tokenId)]
    
    [h, if (disableOption == 0), code:{
      [h: setState("Disabled", 1, tokenId)] 
      [h: currentCombatStatus = json.set(currentCombatStatus,"turnStatus","disabled")] 
      [h: removeFromInitiative(tokenId)]
      [h: msg = "Token is disabled and removed from combat."]
    }]
    [h, if (disableOption == 1), code:{
      [h: setState("Disabled", 1, tokenId)] 
      [h: currentCombatStatus = json.set(currentCombatStatus,"turnStatus","disabled")] 
      [h: initiative = getInitiative(tokenId)]
      [h: setInitiativeHold(initiative, tokenId)]
      [h: msg = "Token is disabled but kept in combat."]
    }]
    [h, if (disableOption == 2), code:{
      [h: currentCombatStatus = json.set(currentCombatStatus,"turnStatus","notjoined")] 
      [h: removeFromInitiative(tokenId)]
      [h: msg = "Token is removed from combat but not disabled."]
    }]

    [h: currentCombatStatus = json.set(currentCombatStatus,"activeCA",0)]
    [h: currentCombatStatus = json.set(currentCombatStatus,"castCA",0)]
    [h: currentCombatStatus = json.set(currentCombatStatus,"proactiveCA",0)]
    [h: currentCombatStatus = json.set(currentCombatStatus,"reactiveCA",0)]

    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]

		[h: logMsg = msg]
  };
  case "disengage" :{
    [h: res = input("junk|<html>"+tokenName+" is disengaging. This will clear its opponents list. Are you sure ?</html>|ignored|LABEL|SPAN=true")]
    [h, if (res != 0), code:{
      [h: fctResult = removeTokenFromWeaponReach(tokenId)]
      [h: logMsg = logMsg+json.get(fctResult,"logMsg")]
    }]      
  };
  case "enable" : {
  	[h: "<!-- when joining a combat, token always came back into fight as out and can act only after next mr event-->"]
    [h: turnStatus = json.get(currentCombatStatus,"turnStatus")]
    [h: currentCombatStatus = json.set(currentCombatStatus,"turnStatus","out")]
    
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeCA",0)]
    [h: currentCombatStatus = json.set(currentCombatStatus,"castCA",0)]
    [h: currentCombatStatus = json.set(currentCombatStatus,"proactiveCA",0)]
    [h: currentCombatStatus = json.set(currentCombatStatus,"reactiveCA",0)]
    
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]
    
    [h: setState("Disabled", 0, tokenId)]
    [h: setState("Out", 1, tokenId)]
    [h: setInitiativeHold(0,tokenId)]

    [h: msg = "Token join the combat."]
		[h: logMsg = msg]
  };
  case "engage" :{
    [h: tokenLst = getSelected()]
    [h: msgNoTokenId = strformat("No token selected")]
    [h: assert((tokenLst != ""),msgNoTokenId,0)]
    
    [h: "<!-- the actionOwner must be in the list, even if not selected -->"]
    [h: tokenLst = tokenLst+","+tokenId]
    [h: descEngagement = "not yet managed, may not needed"]
    
    [r, foreach(engagedTokenId, tokenLst, ""), code: {
    
      [h: combatStatusProp = getProperty("combatStatus",engagedTokenId)]
      [h: weaponReach = json.get(combatStatusProp,"weaponReach")]
      
      [h: "<!-- reset to a jsonArray (previous usage of weaponReach -->"]
      [h, if (json.type(weaponReach) != "ARRAY") : weaponReach = '[]']
      [h: fctResult = addTokenToWeaponReach(tokenLst,engagedTokenId,weaponReach,descEngagement)]
      
      [h: newWeaponReach = json.get(fctResult,"weaponReach")]
      [h: combatStatusProp = json.set(combatStatusProp,"weaponReach",newWeaponReach)]
      [h: setProperty("combatStatus",combatStatusProp,engagedTokenId)]
      [h: logMsg = logMsg+json.get(fctResult,"logMsg")]
     
    }]   
  };
  case "nxtturn" : {
    [h: "<!-- set activeTurn to 0 to indicate that token played is turn - mandatory (this is checked in onInitiativeChangeRequest -->"]
    [h: setState("CurrentTurn", 0, tokenId)]
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeTurn",0)]
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]
    
		[h: "<!-- switch to next token with turnStatus == on (so it is not necessarly the consecutive token) -->"]
    [h: setState("CurrentTurn", 1, nextTokenId)]
    [h: nextCombatStatus = getProperty("combatStatus",nextTokenId)]
    [h: nextCombatStatus = json.set(nextCombatStatus,"activeTurn",1)]
    [h: setProperty("combatStatus",nextCombatStatus,nextTokenId)]
    [h: setCurrentInitiative(nextTokenOffset)]

    [h: msg = "Direct switch from"+getName(tokenId)]
		
    [h: refreshTokenId = nextTokenId]
		[h: logMsg = "no CA left. Switch to "+getName(nextTokenId)+"."]
    
    [h, if(srcWindow == "openSheet"), code:{    
      [h: macroParam = json.set("{}", "tokenId", nextTokenId,"msg",msg,"tab","combat")]
      [h: lnkTxt = macroLinktext("openSheet@Lib:RQII", "all",macroParam)]
      [h: execLink(lnkTxt,0,"all")]
    }]
   
  };
  case "changereach" : {
    [h:"<!-- Action similar to proactiveAction with the same name. To be used when a change of reach is gained from a combat manoeuvre, NO CA & no rolls are needed. -->"]   
    [h, if (json.isEmpty(weaponReach)), code:{
			[h: mpMsg = strformat("%{logMsg} No opponents to be closed. Engage some opponent first or choose another action.")]
			[h: input("junkVar|<html>"+mpMsg+"</html>|ignored|LABEL|SPAN=true")]
			[h: addCombatLogEntry(tokenId,"proactiveAction",mpMsg,"Change reach has been cancelled. No CA lost")]
			[h: abort(0)]
		};{}]
    
    [h: opponentArray = '[]']
    [h: selectOpponent = '[]']
    [r, foreach(item, weaponReach, ""), code: {
      [h: oppTokenId = json.get(item,"tokenId")]
      [h: oppTokenName = getName(oppTokenId)]
      [h: opponentArray = json.append(opponentArray, oppTokenId)]
      [h: selectOpponent = json.append(selectOpponent, oppTokenName)]
    }]
    
    [h: inputStr = strformat("tip|Select an opponent and the change Reach action:)||LABEL|SPAN=TRUE")]
    [h: inputStr = json.append(inputStr, strformat("oppIdx|"+selectOpponent+"|Engaged opponents|LIST|VALUE=NUMBER DELIMITER=JSON"))]
    [h: inputStr = json.append(inputStr, strformat("changeReach|closing,outranging,outmanoeuvring,engaged|<html>Change reach :</html>|RADIO|VALUE=STRING ORIENT=V SELECT=0"))]
    [h: abort(input(json.toList(inputStr,"##")))] 
    
    [h: logMsg = strformat("%{logMsg} %{changeReach} is done (no roll, no CA spent).<br>")]
    [h: selectedId = json.get(opponentArray,oppIdx)]
    
    [h: fctResult = changeWeaponReachBetweenToken(tokenId,selectedId,changeReach)]
    [h: attLogMsg = json.get(fctResult,"attLogMsg")]
    [h: defLogMsg = json.get(fctResult,"defLogMsg")]
    [h: logMsg = logMsg + attLogMsg + defLogMsg]
    [h: logCombatAction(tokenId,"change",attLogMsg)]
    [h: logCombatAction(selectedId,"change",defLogMsg)]
  };

  case "delprone" : {
    [h: currentCombatStatus = json.set(currentCombatStatus,"situationMod","none")]
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]
    
    [h: setState("Prone", 0, tokenId)]
    
    [h: logMsg = "Token prone status is removed."]
    [h: logCombatAction(tokenId,"change",logMsg)]

    [h: msg = "Token is no more prone !"]
  };
  case "prone" : {
    [h: currentCombatStatus = json.set(currentCombatStatus,"situationMod","prone")]
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]
    
    [h: setState("Prone", 1, tokenId)]
    
    [h: logMsg = "Token is prone."]
    [h: logCombatAction(tokenId,"change",logMsg)]

    [h: msg = "Token just get prone !"]
  };
  case "releaseSpell" : {
  	[h: "<!-- when holdmagic was used,  spell can be released at no cost -->"]
    [h: currentCombatStatus = json.set(currentCombatStatus,"spellReady",0)]
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]
   
    [h: logMsg = "Spell has been released !"]
    [h: logCombatAction(tokenId,"change",logMsg)]

    [h: msg = "Spell has been released !"]
  };
  case "dismissMagic" : {
  	[h: "<!-- remove any remainingCastCA. -->"]
    [h: currentCombatStatus = json.set(currentCombatStatus,"castCA",0)]
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]

    [h: logMsg = "Spell has been dismissed !"]
    [h: logCombatAction(tokenId,"change",logMsg)]

    [h: msg = "Spell has been dismissed !"]
  };
  default: {
 	<br><b>[r: action]</b> is not implemented in <i>updateCombat</i> !<br>
  }
]

[h: addCombatLogEntry(tokenId,"changeAfterAction",logMsg,logComment)]

[h: execFunction("refreshCombatSheets", json.append("[]",cLogTokenId), 0, "all")]

[h, if(srcWindow == "openSheet"), code:{    
    [h: macroParam = json.set("{}", "tokenId", tokenId,"msg",logMsg,"tab","combat")]
    [h: lnkTxt = macroLinktext("openSheet@Lib:RQII", "all",macroParam)]
    [h: execLink(lnkTxt,0,"all")]
}]