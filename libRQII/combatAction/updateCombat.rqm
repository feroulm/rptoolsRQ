[h: tokenId = json.get(macro.args, "tokenId")]
[h: action = json.get(macro.args, "action")]
[h: nextTokenId = json.get(macro.args, "nextTokenId")]
[h: nextTokenOffset = json.get(macro.args, "nextTokenOffset")]

[h: currentCombatStatus = getProperty("combatStatus",tokenId)]

[h: origAction = action]

[r, switch(action), code:
  case "disable" : {
    [h: currentCombatStatus = json.set(currentCombatStatus,"turnStatus","disabled")] 
    <!-- reset all CA -->
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeCA",0)]
    [h: currentCombatStatus = json.set(currentCombatStatus,"castCA",0)]
    [h: currentCombatStatus = json.set(currentCombatStatus,"proactiveCA",0)]
    [h: currentCombatStatus = json.set(currentCombatStatus,"reactiveCA",0)]
    <!-- TO-DO - check if we need to reset other used CA -->
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]
    [h: setState("Out", 0, tokenId)]
    [h: setState("Disabled", 1, tokenId)]
    <!-- put hold with same initiative -->
    [h: initiative = getInitiative(tokenId)]
    [h: setInitiativeHold(initiative, tokenId)]
    <!-- Refresh Action Window for the new token -->
    [h: msg = "Token is disabled"]
    [h: macroParam = json.set("{}", "tokenId", tokenId,"msg",msg)]
    [r, macro("openCombatAction@Lib:RQII"): macroParam]
  };
  case "enable" : {
  	<!-- when disabled, token always came back into fight as out and can act only after next mr event-->
    [h: turnStatus = json.get(currentCombatStatus,"turnStatus")]
    [h: currentCombatStatus = json.set(currentCombatStatus,"turnStatus","out")]
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]
    
    [h: setState("Disabled", 0, tokenId)]
    [h: setState("Out", 1, tokenId)]
    [h: setInitiativeHold(0,tokenId)]
    <!-- Refresh Action Window for the new token -->
    [h: msg = "Token is re-enable"]
    [h: macroParam = json.set("{}", "tokenId", tokenId,"msg",msg)]
    [r, macro("openCombatAction@Lib:RQII"): macroParam]
  };
  case "nxtturn" : {
    <!-- set activeTurn to 0 to indicate that token played is turn - mandatory (this is checked in onInitiativeChangeRequest -->
    [h: setState("CurrentTurn", 0, tokenId)]
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeTurn",0)]
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]
    <!-- switch to next token with turnStatus == on (so it is not necessarly the consecutive token) -->
    [h: setState("CurrentTurn", 1, nextTokenId)]
    [h: nextCombatStatus = getProperty("combatStatus",nextTokenId)]
    [h: nextCombatStatus = json.set(nextCombatStatus,"activeTurn",1)]
    [h: setProperty("combatStatus",nextCombatStatus,nextTokenId)]
    [h: setCurrentInitiative(nextTokenOffset)]
    <!-- Refresh / Open Combat Action Window for new Active Token-->
    [h: msg = "Direct switch from"+getName(tokenId)]
    [h: macroParam = json.set("{}", "tokenId", nextTokenId,"msg",msg)]
    [h, macro("openCombatAction@Lib:RQII"): macroParam]
  };
  default: {
 	<!-- do nothing -->
 	<br>Unexistant action !<br>
 }
]

[r: getName(tokenId)] has done : [r: origAction]
<!-- Refresh Combat Window -->
[r, macro("openCombat@Lib:RQII"): ""]