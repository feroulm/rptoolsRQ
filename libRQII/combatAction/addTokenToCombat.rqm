[h: arguments = macro.args]
[h, if(json.isEmpty(arguments)), code:{
	[assert(0,"<i>xDocumentation::listTokenMacros</i> : no arguments, this macro can't be called without mandatory parameters",0)]
};
{
	[h: tokenId = json.get(arguments,"tokenId")]
  [h: tokenType = getPropertyType(tokenId)]
  [h: tokenName = getName(tokenId)]
    
  [h: msgWrongTokenType = strformat("Token %{tokenName} must be of type RQ_Human to be added to a combat")]
  [h: assert((tokenType == "RQ_Human"),msgWrongTokenType,0)]
}]

[h:"<!-- Don't add token if it is already in -->"]
[h: isInCombat = isNumber(getInitiative(tokenId))]
[h: msgAlreadyExist = strformat("Token %{tokenName} is already in the combat")]
[h: assert((!isInCombat),msgAlreadyExist,0)]

[h:"<!-- get current combat token -->"]
[h: cLogTokenId = findCurrentCombatToken()]
[h: logMsgDbg = strformat("<i>combatAction::logCombatAction</i> : current Combat Token - cLogTokenId=%{cLogTokenId})")]
[h: log.debug(logMsgDbg)]

[r, if(cLogTokenId == "none"), code :{
  [h: "<!-- No combat token found - log is sent to chat window -->"]
  No combat found, token [r: getName(tokenId)] cannot be added.
};{
  [h: combatProp = getProperty("combat",cLogTokenId)]
  
  [r: logMsg = ""+getName(tokenId)+" join combat "+json.get(combatProp,"desc")+"<br>"]
  
  [h: addToInitiative(0,10,tokenId)]
  
  [h: "<!-- Reset currentCombatStatus -->"]
  [h: currentCombatStatus = getProperty("combatStatus",tokenId)]
  [h: currentCombatStatus = resetCombatStatus(tokenId,currentCombatStatus,cLogTokenId)]  
	[h: setProperty("combatStatus",currentCombatStatus,tokenId)]	
	
	[h: "<!-- reset All Token Log -->"]
	[h: logCombatAction(tokenId,"reset","")]
	
	[h: "<!-- reset All States -->"]
	[h: setAllStates(0, tokenId)]
	[h: setInitiativeHold(0,tokenId)]
	
	[h: "<!-- roll Initiative -->"]
	[h: propStrikeRank = getProperty("StrikeRank",tokenId)]
	[h: currentSR = json.get(propStrikeRank, "current")]
	[h: diceRoll = roll(1,1d10)]
	[h: initiative = diceRoll+currentSR]
	
	[h: logMsg = strformat("%{logMsg} Rolled Initiative = <b>%{initiative}</b> : diceRoll (%{diceRoll}) + currentSR(%{currentSR})<br>")]
	[h: addCombatLogEntry(tokenId,"globalEvent",logMsg,"")]
	
	[h: setInitiative(initiative,tokenId)]
	[h: sortInitiative()]
}]
