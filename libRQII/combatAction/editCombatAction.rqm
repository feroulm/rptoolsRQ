[h: arguments = macro.args]
[h, if(json.isEmpty(arguments)), code:{
	[assert(0,"<i>combatAction::editCombatAction</i> : no arguments, this macro can't be called without mandatory parameters",0)]
};
{
	[h: tokenId = json.get(arguments,"tokenId")]
	[h: msg = json.get(arguments,"msg")]
}]

<!-- Combat Status variable -->
[h: tCombatStatus = getProperty("combatStatus",tokenId)]

[h: turnStatus = json.get(tCombatStatus,"turnStatus")]
[h: activeTurn = json.get(tCombatStatus,"activeTurn")]
[h: chargeStatus = json.get(tCombatStatus,"chargeStatus")]
[h: spellReady = json.get(tCombatStatus,"spellReady")]
[h: situationMod = json.get(tCombatStatus,"situationMod")]

[h: activeCA = json.get(tCombatStatus,"activeCA")]
[h: ccCA = json.get(tCombatStatus,"ccCA")]
[h: proactiveCA = json.get(tCombatStatus,"proactiveCA")]
[h: reactiveCA = json.get(tCombatStatus,"reactiveCA")]

[h: baseCA = json.get(tCombatStatus,"baseCA")]
[h: bonusCA = json.get(tCombatStatus,"bonusCA")]
[h: weaponCA = json.get(tCombatStatus,"weaponCA")]
[h: magicCA = json.get(tCombatStatus,"magicCA")]

[h: castCA = json.get(tCombatStatus,"castCA")]
[h: reloadCA = json.get(tCombatStatus,"reloadCA")]
[h: lostProCA = json.get(tCombatStatus,"lostProCA")]
[h: lostCA = json.get(tCombatStatus,"lostCA")]
[h: firstEvade = json.get(tCombatStatus,"firstEvade")]
[h: weaponReach = json.get(tCombatStatus,"weaponReach")]
[h: currWeaponNb = json.get(tCombatStatus,"currWeaponNb")]
[h: defWeaponNb = json.get(tCombatStatus,"defWeaponNb")]

[h: clogTokenId = json.get(tCombatStatus,"cLogTokenId")]
[h: versionTag = json.get(tCombatStatus,"versionTag")]

<!-- Combat Log -->
[h: currentCombatLog = getProperty("combatLog",tokenId)]
[h: turnDeclaration = json.get(currentCombatLog,"turnDeclaration")]

<!-- Change button name and action based on various status -->
[h, if(castCA == 0): castAction = "firstCast"]
[h, if(castCA > 0): castAction = "pursueCast"]
[h, if(reloadCA == 0): rangeAction = "Shoot"]
[h, if(reloadCA > 0): rangeAction = "Reload"]
[h, if(weaponReach == "outranged"): changeRangeAction = "Closing"]
[h, if(weaponReach == "closed"): changeRangeAction = "Disengaging"]
[h, if(chargeStatus == "prepareCharge"): chargeAction = "Continue Charging"]
[h, if(chargeStatus == "passageDone"): chargeAction = "Finishing Charge Passage"]

[h: macroParam = json.set("{}", "tokenId", tokenId)]
[h: lnkTxt = macroLinktext("openSheet@Lib:RQII", "all",macroParam)]

[r, if (activeTurn), code:{
<span style="font-weight: bold;color:green"><a class="pure-menu-link" href="[r: lnkTxt]">[r: getName(tokenId)]</a>&nbsp;(Active Turn)</span>
};{
<span style="font-weight: bold;color:black"><a class="pure-menu-link" href="[r: lnkTxt]">[r: getName(tokenId)]</a> </span>	
}]
<hr>
<!-- Common info whatever the type of action, like situationModifier, range status -->
[r, if(weaponReach != "ok"),code:{
	Token is currently <i>[r: weaponReach]</i>.<br>
}]
[r, if(situationMod == "prone"): "<b>Token is prone, -20% malus on fighting action</b>"]<br>

<!-- Show last action result (erased at each refresh) -->
[r, if (msg != ""), code:{
<b>[r: msg]</b><br><br>
}]

<!-- Compute condition based on various value -->
[h: showProactiveAction = 0]
[h: showOnlyChargingAction = 0]
[h: showReactiveAction = 0]
[h: showNoProactiveAction = 0]
[h: showNoAction = 1]
[h: noActionMsg = ""]
[h: noProactiveActionMsg = ""]

<!-- token can do a proactive action when it is his turn, if he has some CA left, if he has not played already during this cycle and if he has not lose proactiveCA -->
[h, if ((activeTurn)&&(activeCA>0)&&(turnStatus == "on")&&(lostProCA<=0)&&(firstEvade<=0)&&(weaponReach != "outmanoeuvred")&&(chargeStatus == "none")),code:{
  [h: showProactiveAction = 1]
  [h: showNoAction = 0]
}]
<!-- since we can make an OR in the if condition, we reapeat an if for each case noProactiveAction Case-->
[h, if ((activeTurn)&&(activeCA>0)&&(turnStatus == "on")&&(lostProCA>0)),code:{
  [h: showNoProactiveAction = 1]
  [h: showNoAction = 0]
}]
<!-- case when he made a first evade action before -->
[h, if ((activeTurn)&&(activeCA>0)&&(turnStatus == "on")&&(lostProCA<=0)&&(firstEvade>0)),code:{
  [h: showNoProactiveAction = 1]
  [h: showNoAction = 0]
}]
<!-- case when outmanoeuvred -->
[h, if ((activeTurn)&&(activeCA>0)&&(turnStatus == "on")&&(lostProCA<=0)&&(weaponReach == "outmanoeuvred")),code:{
  [h: showNoProactiveAction = 1]
  [h: showNoAction = 0]
}]
[h, if ((activeTurn)&&(turnStatus == "disabled")),code:{
  [h: showProactiveAction = 0]
  [h: showNoProactiveAction = 0]
  [h: showNoAction = 1]
}]
[h, if ((activeTurn)&&(activeCA>0)&&(turnStatus == "on")&&(chargeStatus != "none")),code:{
  [h: showProactiveAction = 0]
  [h: showNoProactiveAction = 0]
  [h: showNoAction = 0]
  [h: showOnlyChargingAction = 1]
}]
[h, if ((!activeTurn)&&(activeCA>0)),code:{
  [h: showReactiveAction = 1]
  [h: showNoAction = 0]
}]
[h, if ((!activeTurn)&&(turnStatus == "disabled")),code:{
  [h: showReactiveAction = 0]
  [h: showNoAction = 1]
}]
[h, if (activeCA<=0): noActionMsg = noActionMsg + "<li>no more CA for this MR</li>"]

<!-- Reason for noProactive action -->
[h, if (lostProCA>0): noProactiveActionMsg = noProactiveActionMsg + "<li>You have still "+lostProCA+ " lost proactive CA because of an event, you can only do reactive actions for this turn</li>"]
[h, if (firstEvade>0): noProactiveActionMsg = noProactiveActionMsg + "<li>first Evade done in previous turn, no proactive action for this turn</li>"]
[h, if (weaponReach == "outmanoeuvred"): noProactiveActionMsg = noProactiveActionMsg + "<li>token is outmanoeuvred, no proactive action for this MR</li>"]
[h, if (turnStatus == "disabled"): noActionMsg = noActionMsg + "<li>turn is disabled, token is out of combat</li>"]
[h, if (turnStatus == "off"): noActionMsg = noActionMsg + "<li>Token has already play his turn during this cycle</li>"]

<!-- Update action target -->
[h: linkUpdateCombat = macroLinkText("updateCombat@Lib:RQII", "all")]
[h: linkUpdateCombatProactive = macroLinkText("updateCombatProactive@Lib:RQII", "all")]
[h: linkUpdateCombatReactive = macroLinkText("updateCombatReactive@Lib:RQII", "all")]

<!-- Show proactive action : only if activeTurn = 1 , if activeCA >0 and if turn is On -->
[r, if (showProactiveAction), code :{
  [r, if(turnDeclaration == ""), code:{
  	<b>STEP1</b> - If opponent can react, declare the action first :<br>  	
  	<form action="[r:linkUpdateCombatProactive]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <select name="declaredAction" size="">
             <option selected="selected">Attack</option>
             <option>[r: castAction]</option>
             <option>[r: rangeAction]</option>
             [r, if(weaponReach != "ok"): "<option>"+changeRangeAction+"</option>"]
             <option>delay</option>
             <option>Outmanoeuvre</option>
             [r, if(chargeStatus == "none"): "<option>Charging</option>"]
             [r, if(chargeStatus == "prepareCharge"): "<option>"+chargeAction+"</option>"]
             [r, if(chargeStatus == "passageDone"): "<option>"+chargeAction+"</option>"]
             [r, if(chargeStatus == "chargeReady"): "<option>Charge: Passage</option>"]
             [r, if(chargeStatus == "chargeReady"): "<option>Charge: Crash</option>"]
          </select>
          [r: htmlSelectCombatToken("actionTarget",tokenId)]
          <input type="text" name="actionDesc" size="20">
          <input type="hidden" name="action" value="declareProactive">
          <input type="submit" name="edit_btn" value="Declare Action">
    </form> 	
  };{
  	<form action="[r:linkUpdateCombatProactive]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <select name="declaredAction" size="">
             <option selected="selected">Attack</option>
             <option>[r: castAction]</option>
             <option>[r: rangeAction]</option>
             [r, if(weaponReach != "ok"): "<option>"+changeRangeAction+"</option>"]
             <option>delay</option>
             <option>Outmanoeuvre</option>
             [r, if(chargeStatus == "none"): "<option>Charging</option>"]
             [r, if(chargeStatus == "prepareCharge"): "<option>"+chargeAction+"</option>"]
             [r, if(chargeStatus == "passageDone"): "<option>"+chargeAction+"</option>"]
             [r, if(chargeStatus == "chargeReady"): "<option>Charge: Passage</option>"]
             [r, if(chargeStatus == "chargeReady"): "<option>Charge: Crash</option>"]
          </select>
          [r: htmlSelectCombatToken("actionTarget",tokenId)]
          <input type="text" name="actionDesc" size="20">
          <input type="hidden" name="action" value="declareProactive">
          <input type="submit" name="edit_btn" value="Change declared action">
    </form> 
    <br>	
  	 Token is currently doing : <b>[r: turnDeclaration]</b><br>
     <br>
  }]
  <span style="font-weight: bold;color:red"><b>!!</b> : Reactive action and changes must be achieved first on opponent(s) before selecting an action below.</span><br>
  <br>
  <b>STEP2</b> - Select the proactive action <b>that has been done</b>, this will end the active turn<hr>
  [r, if(castCA > 0): "<span style='font-weight: bold;color:red'><b>!!</b> You have "+castCA+" remaining castCA, you should pursue your casting.<br></span>"]
  [r, if(reloadCA > 0): "<b>!!</b> You have "+reloadCA+" remaining reloadCA, you should reload before shooting.<br>"]
  <table>
    <tr>
      <td>
        <form action="[r:linkUpdateCombatProactive]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <input type="hidden" name="action" value="attack">
          <input type="submit" name="edit_btn" value="Attack">
        </form>
      </td>
      <td>
        <form action="[r:linkUpdateCombatProactive]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <input type="hidden" name="action" value="delay">
          <input type="submit" name="edit_btn" value="delay">
        </form>
      </td>      
      <td>
      [h, if(castCA == 0): castAction = "firstCast"]
      [h, if(castCA > 0): castAction = "pursueCast"]
        <form action="[r:linkUpdateCombatProactive]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <input type="hidden" name="action" value="[r:castAction]">
          <input type="submit" name="edit_btn" value="[r:castAction]">
        </form>
      </td>
      <td>
      [h, if(reloadCA == 0): rangeAction = "Shoot"]
      [h, if(reloadCA > 0): rangeAction = "Reload"]
        <form action="[r:linkUpdateCombatProactive]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <input type="hidden" name="action" value="[r:rangeAction]">
          <input type="submit" name="edit_btn" value="[r:rangeAction]">
        </form>
      </td>
      <td>
        <form action="[r:linkUpdateCombatProactive]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <input type="hidden" name="action" value="Outmanoeuvre">
          <input type="submit" name="edit_btn" value="Outmanoeuvre">
        </form>
      </td>
      [r, if(weaponReach != "ok"), code:{
      <td>
        <form action="[r:linkUpdateCombatProactive]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <input type="hidden" name="action" value="changeRange">
          <input type="submit" name="edit_btn" value="[r:changeRangeAction]">
        </form>
      </td>
      }]
      [r, if(chargeStatus == "none"), code:{
      <td>
        <form action="[r:linkUpdateCombatProactive]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <input type="hidden" name="action" value="chargePrepare">
          <input type="submit" name="edit_btn" value="Charging">
        </form>
      </td>
      }]
    </tr>
    <tr>
      <td>
        <form action="[r:linkUpdateCombatProactive]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <input type="hidden" name="action" value="attack">
          <input type="submit" name="edit_btn" value="Dither">
        </form>
      </td>
      <td>
        <form action="[r:linkUpdateCombatProactive]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <input type="hidden" name="action" value="attack">
          <input type="submit" name="edit_btn" value="Brace">
        </form>
      </td>     
      <td>
        <form action="[r:linkUpdateCombatProactive]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <input type="hidden" name="action" value="holdMagic">
          <input type="submit" name="edit_btn" value="Hold Magic">
        </form>
      </td>
      <td>
        <form action="[r:linkUpdateCombatProactive]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <input type="hidden" name="action" value="attack">
          <input type="submit" name="edit_btn" value="Move">
        </form>
      </td> 
      <td>
        <form action="[r:linkUpdateCombatProactive]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <input type="hidden" name="action" value="regainFooting">
          <input type="submit" name="edit_btn" value="Regain Footing">
        </form>
      </td>
      <td>
        <form action="[r:linkUpdateCombatProactive]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <input type="hidden" name="action" value="attack">
          <input type="submit" name="edit_btn" value="Ready Weapon">
        </form>
      </td>
    </tr>
  </table>
}]
<!-- Show reactive action : only if turnStatus = delay or on and activeTurn  -->
[r, if (showReactiveAction), code :{
  [r, if(chargeStatus=="prepareCharge"): "<b>!!Token is charging</b>. Doing an Evade will break the charge.<br>"]	
  Turn is no active, token can only take reactive actions<br>
  <table style="padding: 0px; cellspacing:0px; border-spacing:0 0px;">
    <tr>
      <td>
        <form action="[r:linkUpdateCombatReactive]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <input type="hidden" name="action" value="parry">
          <input type="submit" name="edit_btn" value="Parry">
        </form>
      </td>
      <td>
        <form action="[r:linkUpdateCombatReactive]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <input type="hidden" name="action" value="parry">
          <input type="submit" name="edit_btn" value="Counter Spell">
        </form>
      </td>
      <td>
        <form action="[r:linkUpdateCombatReactive]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <input type="hidden" name="action" value="evade">
          <input type="submit" name="edit_btn" value="Evade">
        </form>
      </td>
      <td>
        <form action="[r:linkUpdateCombatReactive]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <input type="hidden" name="action" value="evadeProne">
          <input type="submit" name="edit_btn" value="Evade (Prone)">
        </form>
      </td>
    </tr>
    <tr>
      <td>
        <form action="[r:linkUpdateCombatReactive]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <input type="hidden" name="action" value="parry">
          <input type="submit" name="edit_btn" value="Outmanoeuvre: Resist">
        </form>
      </td>
      <td></td>
      <td>
        <form action="[r:linkUpdateCombatReactive]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <input type="hidden" name="action" value="parry">
          <input type="submit" name="edit_btn" value="Change Range: Resist">
        </form>
      </td>
      <td></td>
    </tr>
    <tr>
      <td>
        <form action="[r:linkUpdateCombatProactive]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <input type="hidden" name="action" value="chargeRiposte">
          <input type="submit" name="edit_btn" value="Charge: Riposte">
        </form>
      </td>  
      <td>
        <form action="[r:linkUpdateCombatProactive]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <input type="hidden" name="action" value="chargeRiposte">
          <input type="submit" name="edit_btn" value="Charge: Mounted Attack">
        </form>
      </td>  
      <td>
        <form action="[r:linkUpdateCombatReactive]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <input type="hidden" name="action" value="parry">
          <input type="submit" name="edit_btn" value="Change Range: Riposte">
        </form>
      </td>
      <td></td>
    </tr>
  </table>
  <!-- Check is any token can still play -->
  [r, if(turnStatus == "delay"): showDelayedAction(tokenId)]
  
}]

<!-- Charge specific case -->

[r, if (showOnlyChargingAction), code :{
  [r, if(turnDeclaration == ""), code:{
  	<b>STEP1</b> - If opponent can react, declare the action first :<br>  	
  	<form action="[r:linkUpdateCombatProactive]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <select name="declaredAction" size="">
             [r, if(chargeStatus == "none"): "<option selected='selected'>Charging</option>"]
             [r, if(chargeStatus == "prepareCharge"): "<option selected='selected'>"+chargeAction+"</option>"]
             [r, if(chargeStatus == "passageDone"): "<option selected='selected'>"+chargeAction+"</option>"]
             [r, if(chargeStatus == "chargeReady"): "<option selected='selected'>Charge: Passage</option>"]
             [r, if(chargeStatus == "chargeReady"): "<option>Charge: Crash</option>"]
          </select>
          [r: htmlSelectCombatToken("actionTarget",tokenId)]
          <input type="text" name="actionDesc" size="20">
          <input type="hidden" name="action" value="declareProactive">
          <input type="submit" name="edit_btn" value="Declare Action">
    </form> 	
  };{
  	<form action="[r:linkUpdateCombatProactive]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <select name="declaredAction" size="">
             [r, if(chargeStatus == "none"): "<option selected='selected'>Charging</option>"]
             [r, if(chargeStatus == "prepareCharge"): "<option selected='selected'>"+chargeAction+"</option>"]
             [r, if(chargeStatus == "passageDone"): "<option selected='selected'>"+chargeAction+"</option>"]
             [r, if(chargeStatus == "chargeReady"): "<option selected='selected'>Charge: Passage</option>"]
             [r, if(chargeStatus == "chargeReady"): "<option>Charge: Crash</option>"]
          </select>
          [r: htmlSelectCombatToken("actionTarget",tokenId)]
          <input type="text" name="actionDesc" size="20">
          <input type="hidden" name="action" value="declareProactive">
          <input type="submit" name="edit_btn" value="Change declared action">
    </form> 
    <br>	
  	 Token is currently doing : <b>[r: turnDeclaration]</b><br>
     <br>
  }]
  <span style="font-weight: bold;color:red"><b>!!</b> : Reactive action and changes must be achieved first on opponent(s) before selecting an action below.</span><br>

	
  [r, if(chargeStatus == "chargeReady"), code:{
  	 Charge is ready, select either Passage or Crash Action :
  }]
  [r, if(chargeStatus == "passageDone"), code:{
  	 Charge as passed, continue moving till end of the MR :
  }]
  [r, if(chargeStatus == "prepareCharge"), code:{
  	 Token is charging, continue moving till end of the MR :
  }]
  <table>
    <tr>
      [r, if(chargeStatus == "chargeReady"), code:{
      <td>
        <form action="[r:linkUpdateCombatProactive]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <input type="hidden" name="action" value="chargePassage">
          <input type="submit" name="edit_btn" value="Charge: Passage">
        </form>
      </td>
      <td>
        <form action="[r:linkUpdateCombatProactive]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <input type="hidden" name="action" value="chargeCrash">
          <input type="submit" name="edit_btn" value="Charge: Crash">
        </form>
      </td>
      }]
      [r, if((chargeStatus == "passageDone")||(chargeStatus == "prepareCharge")), code:{
      <td>
        <form action="[r:linkUpdateCombatProactive]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <input type="hidden" name="action" value="attack">
          <input type="submit" name="edit_btn" value="[r:chargeAction]">
        </form>
      </td>
      }]
    </tr>
  </table>
	
}]

[r, if (showNoProactiveAction), code :{
  You have to delay your turn :<ul>
  [r: noProactiveActionMsg]
  </ul>
  <form action="[r:linkUpdateCombatProactive]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <input type="hidden" name="action" value="delay">
          <input type="submit" name="edit_btn" value="delay">
  </form>
}]

[r, if (showNoAction), code :{
  Can only do free actions<br>
  No actions because :<ul>[r: noActionMsg]</ul>
  <!-- jump to next token which is not out or disabled -->
  [r, if (activeTurn): getNextTurn(tokenId)]
}]
<br>
Change after combat action
<hr>
[r, if(spellReady > 0): "<span style='font-weight: bold;color:red'><b>!!</b> You have used Hold Magic, and have a spell to release<br></span>"]
[h: linkUpdateCombat = macroLinkText("updateCombat@Lib:RQII", "all")]
[h: tokenType = getPropertyType(tokenId)]
[h, switch(tokenType):
  case "RQ_Human" : linkDamageHeal = macroLinkText("openAPHP@Lib:RQII", "all");
  case "RQ_Monster" : linkDamageHeal = macroLinkText("openAPHP@Lib:RQII", "all");
  default: linkDamageHeal = macroLinkText("openAPHP@Lib:RQII", "all");
]
<table style="padding: 0px; cellspacing:0px;">
  <tr>
    <td>
      <form action="[r:linkDamageHeal]" method="json">
        <input type="hidden" name="tokenId" value="[r:tokenId]">
        <input type="submit" name="edit_btn" value="Damage / Heal">
      </form>
    </td>
    [r, if(weaponReach != "outmanoeuvred"), code:{
      <td>
        <form action="[r:linkUpdateCombat]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <input type="hidden" name="action" value="outmanoeuvred">
          <input type="submit" name="edit_btn" value="Outmanoeuvred">
        </form>
      </td>
    }]
    [r, if(weaponReach != "outranged"), code:{
      <td>
        <form action="[r:linkUpdateCombat]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <input type="hidden" name="action" value="outranged">
          <input type="submit" name="edit_btn" value="Outranged">
        </form>
      </td>
    }]
    [r, if(weaponReach != "closed"), code:{
      <td>
        <form action="[r:linkUpdateCombat]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <input type="hidden" name="action" value="closed">
          <input type="submit" name="edit_btn" value="Closed">
        </form>
      </td>
    }]
    <td>
      [h: linkOpenHumCombatAttr = macroLinkText("openHumCombatAttr@Lib:RQII", "all")]
	  <form action="[r:linkOpenHumCombatAttr]" method="json">
        <input type="hidden" name="tokenId" value="[r:tokenId]">
        <input type="submit" name="edit_btn" value="Change Charac & Weapon">
      </form>
    </td>
    <td>
      [h: linkDisable = macroLinkText("updateCombat@Lib:RQII", "all")]
      <form action="[r:linkDisable]" method="json">
        <input type="hidden" name="tokenId" value="[r:tokenId]">
        <input type="hidden" name="action" value="disable">
        <input type="submit" name="edit_btn" value="disable">
      </form>
    </td>
  </tr>
  <tr>
    [r, if(weaponReach != "ok"), code:{
      <td>
        <form action="[r:linkUpdateCombat]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <input type="hidden" name="action" value="delreachmalus">
          <input type="submit" name="edit_btn" value="Remove reach malus">
        </form>
      </td>
    }]
    [r, if(situationMod == "prone"), code:{
      <td>
        <form action="[r:linkUpdateCombat]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <input type="hidden" name="action" value="delprone">
          <input type="submit" name="edit_btn" value="Remove Prone">
        </form>
      </td>
    }]
    [r, if(situationMod != "prone"), code:{
      <td>
        <form action="[r:linkUpdateCombat]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <input type="hidden" name="action" value="prone">
          <input type="submit" name="edit_btn" value="Prone">
        </form>
      </td>
    }]
	[r, if(spellReady>0), code:{
      <td>
        <form action="[r:linkUpdateCombat]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <input type="hidden" name="action" value="releaseSpell">
          <input type="submit" name="edit_btn" value="Release Spell">
        </form>
      </td>
    }]
	<td>
        <form action="[r:linkUpdateCombat]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <input type="hidden" name="action" value="dismissMagic">
          <input type="submit" name="edit_btn" value="Dismiss Magic">
        </form>
     </td>
  </tr>
</table>
<br>
Combat status - Data
<hr>
<table>
  <tr>
    <td colspan="2">Turn</td>
    <td colspan="2">CA values</td>
    <td colspan="2">Compute CA</td>
    <td colspan="4">Malus</td>

  </tr>
  <tr>
    <td>turnStatus</td><td> [r: turnStatus] </td>
    <td>activeCA</td><td> [r: activeCA] </td>
    <td>baseCA</td><td> [r: baseCA] </td>
    <td>castCA</td><td> [r: castCA] </td>
    <td>lostProCA</td><td> [r: lostProCA] </td>
  </tr>
  <tr>
    <td>activeTurn</td><td> [r: activeTurn] </td> 
    <td>ccCA</td><td> [r: ccCA] </td>
    <td>bonusCA</td><td> [r: bonusCA] </td>
    <td>reloadCA</td><td>[r: reloadCA] </td>
    <td>lostCA</td><td> [r: lostCA] </td>
  </tr>
  <tr>
    <td>chargeStatus</td><td>[r: chargeStatus]</td>
    <td>proactiveCA</td><td> [r: proactiveCA] </td>
    <td>weaponCA</td><td> [r: weaponCA] </td>
    <td>firstEvade</td><td> [r: firstEvade] </td>
    <td>currWeaponNb</td><td> [r: currWeaponNb]</td>
  </tr>
  <tr>
    <td>situationMod</td><td>[r: situationMod]</td>
    <td>reactiveCA</td><td> [r: reactiveCA] </td>
    <td>magicCA</td><td> [r: magicCA] </td>
    <td>weaponReach</td><td> [r: weaponReach]</td>
    <td>defWeaponNb</td><td> [r: defWeaponNb]</td>
  </tr>
  <tr>
    <td>spellReady</td><td>[r: spellReady]</td>
		<td></td><td></td>
		<td></td><td></td>
    <td></td><td></td>
    <td></td><td></td>
  </tr>
	  <tr>
		<td>versionTag</td><td>[r: versionTag]</td>
		[h: cLogTokenExist = findToken(clogTokenId)]
		[r, if(cLogTokenExist == ""), code: {
			<td>cLogTokenId</td><td colspan="7">
				<span style="font-weight: bold;color:red">WARNING. Linked combatToken not found on this map.</span>
			</td>
		};{
			[h: combatProp = getProperty("combat",clogTokenId)]
			<td>cLogTokenId</td><td colspan="7">[r: cLogTokenId] ([r: json.get(combatProp,"desc")])</td>
		}]
  </tr>
  <tr>
    <td colspan="5">
      [h: linkSetCombatStatus = macroLinkText("setTokenCombatStatus@Lib:RQII", "")]
      <form action="[r:linkSetCombatStatus]" method="json">
        <input type="hidden" name="tokenId" value="[r:tokenId]">
        <input type="submit" name="edit_btn" value="Edit Combat Status">
      </form>
    </td>
  </tr>
</table> 