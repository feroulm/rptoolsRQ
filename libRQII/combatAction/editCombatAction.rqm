[h: arguments = macro.args]
[h, if(json.isEmpty(arguments)), code:{
  [assert(0,"<i>combatAction::editCombatAction</i> : no arguments, this macro can't be called without mandatory parameters",0)]
};
{
  [h: tokenId = json.get(arguments,"tokenId")]
  [h: msg = json.get(arguments,"msg")]
}]

[h: tokenMap = getCurrentMapName()]

<!-- Combat Status variable -->
[h: tCombatStatus = getProperty("combatStatus",tokenId)]

[h: turnStatus = json.get(tCombatStatus,"turnStatus")]
[h: activeTurn = json.get(tCombatStatus,"activeTurn")]
[h: chargeStatus = json.get(tCombatStatus,"chargeStatus")]
[h: spellReady = json.get(tCombatStatus,"spellReady")]
[h: situationMod = json.get(tCombatStatus,"situationMod")]

[h: activeCA = json.get(tCombatStatus,"activeCA")]
[h: ccCA = json.get(tCombatStatus,"ccCA")]
[h: proactiveCA = json.get(tCombatStatus,"proactiveCA")]
[h: reactiveCA = json.get(tCombatStatus,"reactiveCA")]

[h: baseCA = json.get(tCombatStatus,"baseCA")]
[h: bonusCA = json.get(tCombatStatus,"bonusCA")]
[h: weaponCA = json.get(tCombatStatus,"weaponCA")]
[h: magicCA = json.get(tCombatStatus,"magicCA")]

[h: castCA = json.get(tCombatStatus,"castCA")]
[h: reloadCA = json.get(tCombatStatus,"reloadCA")]
[h: lostProCA = json.get(tCombatStatus,"lostProCA")]
[h: lostCA = json.get(tCombatStatus,"lostCA")]
[h: firstEvade = json.get(tCombatStatus,"firstEvade")]
[h: weaponReach = json.get(tCombatStatus,"weaponReach")]
[h: currWeaponNb = json.get(tCombatStatus,"currWeaponNb")]
[h: defWeaponNb = json.get(tCombatStatus,"defWeaponNb")]

[h: clogTokenId = json.get(tCombatStatus,"cLogTokenId")]
[h: versionTag = json.get(tCombatStatus,"versionTag")]

<!-- Combat Log -->
[h: currentCombatLog = getProperty("combatLog",tokenId)]
[h: turnDeclaration = json.get(currentCombatLog,"turnDeclaration")]

<!-- Change button name and action based on various status -->
[h, if(castCA == 0): castAction = "firstCast"]
[h, if(castCA > 0): castAction = "pursueCast"]
[h, if(reloadCA == 0): rangeAction = "Shoot"]
[h, if(reloadCA > 0): rangeAction = "Reload"]
[h, if(weaponReach == "outranged"): changeRangeAction = "Closing"]
[h, if(weaponReach == "closed"): changeRangeAction = "Disengaging"]
[h, if(chargeStatus == "prepareCharge"): chargeAction = "Continue Charging"]
[h, if(chargeStatus == "passageDone"): chargeAction = "Finishing Charge Passage"]

[h: macroParam = json.set("{}", "tokenId", tokenId)]
[h: lnkTxt = macroLinktext("openSheet@Lib:RQII", "all",macroParam)]
[h: propMagicPoint = getProperty("MagicPoint",tokenId,tokenMap)]

<div class="container pure-g">
  <div class="pure-u-1">
    <table class="content pure-table table-striped-custom">
      <tbody>
      [r, if (activeTurn), code:{      
        <tr class="active">
          <td><img src="[r: getTokenPortrait(70,tokenId,tokenMap)]"></img></td>
          <td><a id="active" class="link-token pure-menu-link" href="[r: lnkTxt]">[r: getName(tokenId)]</a><br>
            [h: macroParam = json.set("{}", "tokenId", tokenId)]
            [h: link = macroLinkText("openForgotReactiveAction@Lib:RQII", "all",macroParam)]
            <a class="button-small pure-button" href="[r: link]">Reactive Action<br>before turn</a>
          </td>
          <td>Acting in its Turn
          <br><br>CA : <span style="font-weight: bold;color:blue">[r: json.get(tCombatStatus,"activeCA")]</span> / [r: json.get(tCombatStatus,"ccCA")]
            [r, if(isNPC(tokenId) && !isGM()), code: {
            };{
            <br>MP : <span style="font-weight: bold;color:blue">[r: json.path.read(propMagicPoint,"MP.current")]</span> / [r: json.path.read(propMagicPoint,"MP.base")]
            }]
          </td>
          <td>[r: if((isNPC(tokenId) && !isGM()),"",showActionSkillsOnly(tokenId))]</td>
        </tr>
      };{
        <tr>
          <td><img src="[r: getTokenPortrait(70,tokenId,tokenMap)]"></img></td>
          <td><a class="link-token pure-menu-link" href="[r: lnkTxt]">[r: getName(tokenId)]</a>
          <td>
            Not acting in its turn
            <br><br>CA : <span style="font-weight: bold;color:blue">[r: json.get(tCombatStatus,"activeCA")]</span> / [r: json.get(tCombatStatus,"ccCA")]
            [r, if(isNPC(tokenId) && !isGM()), code: {
            };{
            <br>MP : <span style="font-weight: bold;color:blue">[r: json.path.read(propMagicPoint,"MP.current")]</span> / [r: json.path.read(propMagicPoint,"MP.base")]
            }]
          </td>
          <td>[r: if((isNPC(tokenId) && !isGM()),"",showActionSkillsOnly(tokenId))]</td>
        </tr>
      }]
      </tbody>
    </table>
  </div>
</div>

<!-- Common info whatever the type of action, like situationModifier, range status -->

<div class="container pure-g">
  <div class="pure-u-1">
    [r, if(weaponReach != "ok"),code:{
      Token is currently <i>[r: weaponReach]</i>.<br>
    }]
    [r, if(situationMod == "prone"): "<b>Token is prone, -20% malus on fighting action</b>"]<br>
    
    <!-- Show last action result (erased at each refresh) -->
    [r, if (msg != ""), code:{
    <b>[r: msg]</b><br><br>
    }]
  </div>
</div>

<!-- Compute condition based on various value -->
[h: showProactiveAction = 0]
[h: showOnlyChargingAction = 0]
[h: showReactiveAction = 0]
[h: showNoProactiveAction = 0]
[h: showNoAction = 1]
[h: noActionMsg = ""]
[h: noProactiveActionMsg = ""]

<!-- token can do a proactive action when it is his turn, if he has some CA left, if he has not played already during this cycle and if he has not lose proactiveCA -->
[h, if ((activeTurn)&&(activeCA>0)&&(turnStatus == "on")&&(lostProCA<=0)&&(firstEvade<=0)&&(weaponReach != "outmanoeuvred")&&(chargeStatus == "none")),code:{
  [h: showProactiveAction = 1]
  [h: showNoAction = 0]
}]
<!-- since we can make an OR in the if condition, we reapeat an if for each case noProactiveAction Case-->
[h, if ((activeTurn)&&(activeCA>0)&&(turnStatus == "on")&&(lostProCA>0)),code:{
  [h: showNoProactiveAction = 1]
  [h: showNoAction = 0]
}]
<!-- case when he made a first evade action before -->
[h, if ((activeTurn)&&(activeCA>0)&&(turnStatus == "on")&&(lostProCA<=0)&&(firstEvade>0)),code:{
  [h: showNoProactiveAction = 1]
  [h: showNoAction = 0]
}]
<!-- case when outmanoeuvred -->
[h, if ((activeTurn)&&(activeCA>0)&&(turnStatus == "on")&&(lostProCA<=0)&&(weaponReach == "outmanoeuvred")),code:{
  [h: showNoProactiveAction = 1]
  [h: showNoAction = 0]
}]
[h, if ((activeTurn)&&(turnStatus == "disabled")),code:{
  [h: showProactiveAction = 0]
  [h: showNoProactiveAction = 0]
  [h: showNoAction = 1]
}]
[h, if ((activeTurn)&&(activeCA>0)&&(turnStatus == "on")&&(chargeStatus != "none")),code:{
  [h: showProactiveAction = 0]
  [h: showNoProactiveAction = 0]
  [h: showNoAction = 0]
  [h: showOnlyChargingAction = 1]
}]
[h, if ((!activeTurn)&&(activeCA>0)),code:{
  [h: showReactiveAction = 1]
  [h: showNoAction = 0]
}]
[h, if ((!activeTurn)&&(turnStatus == "disabled")),code:{
  [h: showReactiveAction = 0]
  [h: showNoAction = 1]
}]
[h, if (activeCA<=0): noActionMsg = noActionMsg + "<li>no more CA for this MR</li>"]

<!-- Reason for noProactive action -->
[h, if (lostProCA>0): noProactiveActionMsg = noProactiveActionMsg + "<li>You have still "+lostProCA+ " lost proactive CA because of an event, you can only do reactive actions for this turn</li>"]
[h, if (firstEvade>0): noProactiveActionMsg = noProactiveActionMsg + "<li>first Evade done in previous turn, no proactive action for this turn</li>"]
[h, if (weaponReach == "outmanoeuvred"): noProactiveActionMsg = noProactiveActionMsg + "<li>token is outmanoeuvred, no proactive action for this MR</li>"]
[h, if (turnStatus == "disabled"): noActionMsg = noActionMsg + "<li>turn is disabled, token is out of combat</li>"]
[h, if (turnStatus == "off"): noActionMsg = noActionMsg + "<li>Token has already play his turn during this cycle</li>"]

<!-- Update action target -->
[h: linkUpdateCombat = macroLinkText("updateCombat@Lib:RQII", "all")]
[h: linkUpdateCombatProactive = macroLinkText("updateCombatProactive@Lib:RQII", "all")]
[h: linkUpdateCombatReactive = macroLinkText("updateCombatReactive@Lib:RQII", "all")]

<!-- Show proactive action : only if activeTurn = 1 , if activeCA >0 and if turn is On -->
<div class="container pure-g">
  <div class="pure-u-1">
[r, if (showProactiveAction), code :{
  [r, if(turnDeclaration == ""), code:{
    <b>STEP1</b> - If opponent can react, declare the action first.
    <hr>    
    <form class="pure-form" action="[r:linkUpdateCombatProactive]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <select name="declaredAction" size="">
             <option selected="selected">Attack</option>
             <option>[r: castAction]</option>
             <option>[r: rangeAction]</option>
             <option>Move</option>
             [r, if(weaponReach != "ok"): "<option>"+changeRangeAction+"</option>"]
             <option>Delay</option>
             <option>Dither</option>
             <option>Ready Weapon</option>
             <option>Others</option>
             <option>Outmanoeuvre</option>
             [r, if(chargeStatus == "none"): "<option>Charging</option>"]
             [r, if(chargeStatus == "prepareCharge"): "<option>"+chargeAction+"</option>"]
             [r, if(chargeStatus == "passageDone"): "<option>"+chargeAction+"</option>"]
             [r, if(chargeStatus == "chargeReady"): "<option>Charge: Passage</option>"]
             [r, if(chargeStatus == "chargeReady"): "<option>Charge: Crash</option>"]
          </select>
          [r: htmlSelectCombatToken("actionTarget",tokenId)]
          <input type="text" name="actionDesc" size="20">
          <input type="hidden" name="action" value="declareProactive">
          <input type="submit" name="actionLabel" value="Declare Action" class="pure-button pure-button-primary">
    </form>   
  };{
    <br>  
     Token is currently doing : <b>[r: turnDeclaration]</b><br>
    <br>
    <form class="pure-form" action="[r:linkUpdateCombatProactive]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <select name="declaredAction" size="">
             <option selected="selected">Attack</option>
             <option>[r: castAction]</option>
             <option>[r: rangeAction]</option>
             <option>Move</option>
             [r, if(weaponReach != "ok"): "<option>"+changeRangeAction+"</option>"]
             <option>Delay</option>
             <option>Dither</option>
             <option>Ready Weapon</option>
             <option>Others</option>
             <option>Outmanoeuvre</option>
             [r, if(chargeStatus == "none"): "<option>Charging</option>"]
             [r, if(chargeStatus == "prepareCharge"): "<option>"+chargeAction+"</option>"]
             [r, if(chargeStatus == "passageDone"): "<option>"+chargeAction+"</option>"]
             [r, if(chargeStatus == "chargeReady"): "<option>Charge: Passage</option>"]
             [r, if(chargeStatus == "chargeReady"): "<option>Charge: Crash</option>"]
          </select>
          [r: htmlSelectCombatToken("actionTarget",tokenId)]
          <input type="text" name="actionDesc" size="20">
          <input type="hidden" name="action" value="declareProactive">
          <input type="submit" name="actionLabel" value="Change declared action" class="pure-button pure-button-primary">
    </form> 

  }]
  <span style="font-weight: bold;color:red"><b>!!</b> : Reactive action and changes must be achieved first on opponent(s) before selecting an action below.</span><br>
  <br>

  <b>STEP2</b> - Select the proactive action <b>that has been done</b>, this will end the active turn.
  <hr>
  [r, if(castCA > 0): "<span style='font-weight: bold;color:red'><b>!!</b> You have "+castCA+" remaining castCA, you should pursue your casting.<br></span>"]
  [r, if(reloadCA > 0): "<span style='font-weight: bold;color:red'><b>!!</b> You have "+reloadCA+" remaining reloadCA, you should reload before shooting.<br></span>"]
  <table>
    <tr>
      <td>
        [h: macroParam = json.set("{}", "tokenId", tokenId,"action","attack","actionLabel","Attack")]
        [h: link = macroLinkText("updateCombatProactive@Lib:RQII", "all",macroParam)]
        <a class="button-small pure-button" href="[r: link]">Attack</a>
      </td>
      <td>
        [h: macroParam = json.set("{}", "tokenId", tokenId,"action","delay","actionLabel","Delay")]
        [h: link = macroLinkText("updateCombatProactive@Lib:RQII", "all",macroParam)]
        <a class="button-small pure-button" href="[r: link]">Delay</a>
      </td>      
      <td>
        [h, if(castCA == 0), code:{
          [h: castAction = "firstCast"]
          [h: buttonClass = "button-small pure-button"]
        }]
        [h, if(castCA > 0), code:{
          [h: castAction = "pursueCast"]
          [h: buttonClass = "button-small pure-button pure-button-primary"]
        }]
        [h: macroParam = json.set("{}", "tokenId", tokenId,"action",castAction,"actionLabel",castAction)]
        [h: link = macroLinkText("updateCombatProactive@Lib:RQII", "all",macroParam)]
        <a class="[r: buttonClass]" href="[r: link]">[r:castAction]</a>
      </td>
      <td>
        [h, if(reloadCA == 0): rangeAction = "Shoot"]
        [h, if(reloadCA > 0): rangeAction = "Reload"]
        [h: macroParam = json.set("{}", "tokenId", tokenId,"action",rangeAction,"actionLabel",rangeAction)]
        [h: link = macroLinkText("updateCombatProactive@Lib:RQII", "all",macroParam)]
        <a class="button-small pure-button" href="[r: link]">[r:rangeAction]</a>
      </td>
      <td>
        [h: macroParam = json.set("{}", "tokenId", tokenId,"action","Outmanoeuvre","actionLabel","Outmanoeuvre")]
        [h: link = macroLinkText("updateCombatProactive@Lib:RQII", "all",macroParam)]
        <a class="button-small pure-button" href="[r: link]">Outmanoeuvre</a>
      </td>
      [r, if(weaponReach != "ok"), code:{
      <td>
        [h: macroParam = json.set("{}", "tokenId", tokenId,"action","changeRange","actionLabel",changeRangeAction)]
        [h: link = macroLinkText("updateCombatProactive@Lib:RQII", "all",macroParam)]
        <a class="button-small pure-button" href="[r: link]">[r:changeRangeAction]</a>
      </td>
      }]
      [r, if(chargeStatus == "none"), code:{
      <td>
        [h: macroParam = json.set("{}", "tokenId", tokenId,"action","chargePrepare","actionLabel","Charging")]
        [h: link = macroLinkText("updateCombatProactive@Lib:RQII", "all",macroParam)]
        <a class="button-small pure-button" href="[r: link]">Charging</a>
      </td>
      }]
    </tr>
    <tr>
      <td>
        [h: macroParam = json.set("{}", "tokenId", tokenId,"action","proactiveNodice","actionLabel","Dither")]
        [h: link = macroLinkText("updateCombatProactive@Lib:RQII", "all",macroParam)]
        <a class="button-small pure-button" href="[r: link]">Dither</a>
      </td>
      <td>
        [h: macroParam = json.set("{}", "tokenId", tokenId,"action","proactiveNodice","actionLabel","Brace")]
        [h: link = macroLinkText("updateCombatProactive@Lib:RQII", "all",macroParam)]
        <a class="button-small pure-button" href="[r: link]">Brace</a>
      </td> 
      [r, if(spellReady >0), code:{
      <td>  
        [h: macroParam = json.set("{}", "tokenId", tokenId,"action","holdMagic","actionLabel","Hold Magic")]
        [h: link = macroLinkText("updateCombatProactive@Lib:RQII", "all",macroParam)]
        <a class="button-small pure-button pure-button-primary" href="[r: link]">Hold Magic</a>
      </td>
      }]
      <td>
        [h: macroParam = json.set("{}", "tokenId", tokenId,"action","proactiveNodice","actionLabel","Move")]
        [h: link = macroLinkText("updateCombatProactive@Lib:RQII", "all",macroParam)]
        <a class="button-small pure-button" href="[r: link]">Move</a>
      </td> 
      <td>
        [h: macroParam = json.set("{}", "tokenId", tokenId,"action","regainFooting","actionLabel","Regain Footing")]
        [h: link = macroLinkText("updateCombatProactive@Lib:RQII", "all",macroParam)]
        <a class="button-small pure-button" href="[r: link]">Regain Footing</a>
      </td>
      <td>
        [h: macroParam = json.set("{}", "tokenId", tokenId,"action","proactiveNodice","actionLabel","Ready Weapon")]
        [h: link = macroLinkText("updateCombatProactive@Lib:RQII", "all",macroParam)]
        <a class="button-small pure-button" href="[r: link]">Ready Weapon</a>
      </td>
    </tr>
  </table>
}]
<!-- Show reactive action : only if turnStatus = delay or on and activeTurn  -->
[r, if (showReactiveAction), code :{
  [r, if(chargeStatus=="prepareCharge"): "<b>!!Token is charging</b>. Doing an Evade will break the charge.<br>"] 

  [r, if(turnStatus == "delay"), code:{ 
    [r: showDelayedAction(tokenId)]
    <br>If you still want to delay you turn use the <i>non-delayed</i> reactive action below. They will not use your proactive CA.<br><br>
  };{
    Turn is no active, token can only take reactive actions.<br><br>
  }]
  <b>Reactive Action</b>
  <hr>
  <table style="padding: 0px; cellspacing:0px; border-spacing:0 0px;">
    <tr>
      <td>
        [h: macroParam = json.set("{}", "tokenId", tokenId,"action","parry","actionLabel","Parry")]
        [h: link = macroLinkText("updateCombatReactive@Lib:RQII", "all",macroParam)]
        <a class="button-small pure-button" href="[r: link]">Parry</a>
      </td>
      <td>
        [h: macroParam = json.set("{}", "tokenId", tokenId,"action","parry","actionLabel","Outmanoeuvre: Resist")]
        [h: link = macroLinkText("updateCombatReactive@Lib:RQII", "all",macroParam)]
        <a class="button-small pure-button" href="[r: link]">Outmanoeuvre: Resist</a>       
      </td>
      <td>
        [h: macroParam = json.set("{}", "tokenId", tokenId,"action","parry","actionLabel","Counter Spell")]
        [h: link = macroLinkText("updateCombatReactive@Lib:RQII", "all",macroParam)]
        <a class="button-small pure-button" href="[r: link]">Counter Spell</a>      
      </td>
      <td></td>
    </tr>
    <tr>
      <td>
        [h: macroParam = json.set("{}", "tokenId", tokenId,"action","evade","actionLabel","Evade")]
        [h: link = macroLinkText("updateCombatReactive@Lib:RQII", "all",macroParam)]
        <a class="button-small pure-button" href="[r: link]">Evade</a>      
      </td>
      <td>
        [h: macroParam = json.set("{}", "tokenId", tokenId,"action","parry","actionLabel","Change Range: Resist")]
        [h: link = macroLinkText("updateCombatReactive@Lib:RQII", "all",macroParam)]
        <a class="button-small pure-button" href="[r: link]">Change Range: Resist</a>
      </td>
      <td>
        [h: macroParam = json.set("{}", "tokenId", tokenId,"action","chargeRiposte","actionLabel","Charge: Riposte")]
        [h: link = macroLinkText("updateCombatProactive@Lib:RQII", "all",macroParam)]
        <a class="button-small pure-button pure-button-active" href="[r: link]">Charge: Riposte</a>
      </td>
      <td></td>
    </tr>
    <tr>
      <td>
        [h: macroParam = json.set("{}", "tokenId", tokenId,"action","evadeProne","actionLabel","Evade (Prone)")]
        [h: link = macroLinkText("updateCombatReactive@Lib:RQII", "all",macroParam)]
        <a class="button-small pure-button" href="[r: link]">Evade (Prone)</a>      
      </td>  
      <td>
        [h: macroParam = json.set("{}", "tokenId", tokenId,"action","parry","actionLabel","Change Range: Riposte")]
        [h: link = macroLinkText("updateCombatReactive@Lib:RQII", "all",macroParam)]
        <a class="button-small pure-button" href="[r: link]">Change Range: Riposte</a>
      </td>
      <td>
        [h: macroParam = json.set("{}", "tokenId", tokenId,"action","chargeRiposte","actionLabel","Charge: Mounted Attack")]
        [h: link = macroLinkText("updateCombatProactive@Lib:RQII", "all",macroParam)]
        <a class="button-small pure-button pure-button-active" href="[r: link]">Charge: Mounted Attack</a>
      </td>  
      <td></td>
    </tr>
  </table>
  
}]

<!-- Charge specific case -->

[r, if (showOnlyChargingAction), code :{
  [r, if(turnDeclaration == ""), code:{
    <b>STEP1</b> - If opponent can react, declare the action first :<br>    
    <form class="pure-form" action="[r:linkUpdateCombatProactive]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <select name="declaredAction" size="">
             [r, if(chargeStatus == "none"): "<option selected='selected'>Charging</option>"]
             [r, if(chargeStatus == "prepareCharge"): "<option selected='selected'>"+chargeAction+"</option>"]
             [r, if(chargeStatus == "passageDone"): "<option selected='selected'>"+chargeAction+"</option>"]
             [r, if(chargeStatus == "chargeReady"): "<option selected='selected'>Charge: Passage</option>"]
             [r, if(chargeStatus == "chargeReady"): "<option>Charge: Crash</option>"]
          </select>
          [r: htmlSelectCombatToken("actionTarget",tokenId)]
          <input type="text" name="actionDesc" size="20">
          <input type="hidden" name="action" value="declareProactive">
          <input type="submit" name="actionLabel" value="Declare Action" class="button-small pure-button">
    </form>   
  };{
    <form class="pure-form" action="[r:linkUpdateCombatProactive]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <select name="declaredAction" size="">
             [r, if(chargeStatus == "none"): "<option selected='selected'>Charging</option>"]
             [r, if(chargeStatus == "prepareCharge"): "<option selected='selected'>"+chargeAction+"</option>"]
             [r, if(chargeStatus == "passageDone"): "<option selected='selected'>"+chargeAction+"</option>"]
             [r, if(chargeStatus == "chargeReady"): "<option selected='selected'>Charge: Passage</option>"]
             [r, if(chargeStatus == "chargeReady"): "<option>Charge: Crash</option>"]
          </select>
          [r: htmlSelectCombatToken("actionTarget",tokenId)]
          <input type="text" name="actionDesc" size="20">
          <input type="hidden" name="action" value="declareProactive">
          <input type="submit" name="actionLabel" value="Change declared action" class="button-small pure-button">
    </form> 
    <br>  
     Token is currently doing : <b>[r: turnDeclaration]</b><br>
     <br>
  }]
  <span style="font-weight: bold;color:red"><b>!!</b> : Reactive action and changes must be achieved first on opponent(s) before selecting an action below.</span><br>

  
  [r, if(chargeStatus == "chargeReady"), code:{
     Charge is ready, select either Still charging, Passage or Crash Action :
  }]
  [r, if(chargeStatus == "passageDone"), code:{
     Charge as passed, continue moving till end of the MR :
  }]
  [r, if(chargeStatus == "prepareCharge"), code:{
     Token is charging, continue moving till end of the MR :
  }]
  <table>
    <tr>
      [r, if(chargeStatus == "chargeReady"), code:{
      <td>
        [h: macroParam = json.set("{}", "tokenId", tokenId,"action","proactiveNodice","actionLabel","Move")]
        [h: link = macroLinkText("updateCombatProactive@Lib:RQII", "all",macroParam)]
        <a class="button-small pure-button" href="[r: link]">Still moving</a>
      </td> 
      <td>
        [h: macroParam = json.set("{}", "tokenId", tokenId,"action","chargePassage","actionLabel","Charge attack: Passage")]
        [h: link = macroLinkText("updateCombatProactive@Lib:RQII", "all",macroParam)]
        <a class="button-small pure-button" href="[r: link]">Charge attack: Passage</a>      
      </td>
      <td>
        [h: macroParam = json.set("{}", "tokenId", tokenId,"action","chargeCrash","actionLabel","Charge attack: Crash")]
        [h: link = macroLinkText("updateCombatProactive@Lib:RQII", "all",macroParam)]
        <a class="button-small pure-button" href="[r: link]">Charge attack: Crash</a>      
      </td>
      }]
      [r, if((chargeStatus == "passageDone")||(chargeStatus == "prepareCharge")), code:{
      <td>
        <form class="pure-form" action="[r:linkUpdateCombatProactive]" method="json">
          <input type="hidden" name="tokenId" value="[r:tokenId]">
          <input type="hidden" name="action" value="proactiveNodice">
          <input type="submit" name="actionLabel" value="[r:chargeAction]" class="button-small pure-button">
        </form>
      </td>
      }]
    </tr>
  </table>
  
}]

[r, if (showNoProactiveAction), code :{
  You have to delay your turn :<ul>
  [r: noProactiveActionMsg]
  </ul>
  [h: macroParam = json.set("{}", "tokenId", tokenId,"action","delay")]
  [h: link = macroLinkText("updateCombatProactive@Lib:RQII", "all",macroParam)]
  <a class="pure-button-primary pure-button" href="[r: link]">Delay</a>
}]

[r, if (showNoAction), code :{
  <i>Can only do free actions</i>. No actions because :<ul>[r: noActionMsg]</ul>
  <!-- jump to next token which is not out or disabled -->
  [r, if (activeTurn): getNextTurn(tokenId)]
}]
  </div>
</div>
<div class="container pure-g">
  <div class="pure-u-1">
    <b>Change after combat action</b>
    <hr>
    [r, if(spellReady > 0): "<span style='font-weight: bold;color:red'><b>!!</b> You have used Hold Magic, and have a spell to release<br></span>"]

    <table style="padding: 0px; cellspacing:0px;">
      <tr>
        <td>
          [h: macroParam = json.set("{}", "tokenId", tokenId)]
          [h: link = macroLinkText("openAPHP@Lib:RQII", "all",macroParam)]
          <a class="button-small pure-button" href="[r: link]">Damage / Heal</a>
        </td>
        <td>
          [h: macroParam = json.set("{}", "tokenId", tokenId)]
          [h: link = macroLinkText("openHumCombatAttr@Lib:RQII", "all",macroParam)]
          <a class="button-small pure-button" href="[r: link]">Change Charac & Weapon</a>
        </td>
      [r, if(weaponReach != "outmanoeuvred"), code:{
        <td>
          [h: macroParam = json.set("{}", "tokenId", tokenId,"action","outmanoeuvred")]
          [h: link = macroLinkText("updateCombat@Lib:RQII", "all",macroParam)]
          <a class="button-small pure-button" href="[r: link]">Outmanoeuvred</a>
        </td>
      }]
      [r, if(weaponReach != "outranged"), code:{
        <td>
          [h: macroParam = json.set("{}", "tokenId", tokenId,"action","outranged")]
          [h: link = macroLinkText("updateCombat@Lib:RQII", "all",macroParam)]
          <a class="button-small pure-button" href="[r: link]">Outranged</a>
        </td>
      }]
      [r, if(weaponReach != "closed"), code:{
        <td>
          [h: macroParam = json.set("{}", "tokenId", tokenId,"action","closed")]
          [h: link = macroLinkText("updateCombat@Lib:RQII", "all",macroParam)]
          <a class="button-small pure-button" href="[r: link]">Closed</a>
        </td>
      }]
        <td>
          [h: macroParam = json.set("{}", "tokenId", tokenId,"action","disable")]
          [h: link = macroLinkText("updateCombat@Lib:RQII", "all",macroParam)]
          <a class="button-small pure-button" href="[r: link]">Disable</a>
        </td>
      </tr>
      <tr>
      [r, if(weaponReach != "ok"), code:{
        <td>
          [h: macroParam = json.set("{}", "tokenId", tokenId,"action","delreachmalus")]
          [h: link = macroLinkText("updateCombat@Lib:RQII", "all",macroParam)]
          <a class="button-small pure-button" href="[r: link]">Remove reach malus</a>
        </td>
      }]
      [r, if(situationMod == "prone"), code:{
        <td>
          [h: macroParam = json.set("{}", "tokenId", tokenId,"action","delprone")]
          [h: link = macroLinkText("updateCombat@Lib:RQII", "all",macroParam)]
          <a class="button-small pure-button" href="[r: link]">Remove Prone</a>
        </td>
      }]
      [r, if(situationMod != "prone"), code:{
        <td>
          [h: macroParam = json.set("{}", "tokenId", tokenId,"action","prone")]
          [h: link = macroLinkText("updateCombat@Lib:RQII", "all",macroParam)]
          <a class="button-small pure-button" href="[r: link]">Prone</a>
        </td>
      }]
      [r, if(spellReady>0), code:{
        <td>
          [h: macroParam = json.set("{}", "tokenId", tokenId,"action","releaseSpell")]
          [h: link = macroLinkText("updateCombat@Lib:RQII", "all",macroParam)]
          <a class="button-small pure-button" href="[r: link]">Release Spell</a>
        </td>
      }]
        <td>
          [h: macroParam = json.set("{}", "tokenId", tokenId,"action","dismissMagic")]
          [h: link = macroLinkText("updateCombat@Lib:RQII", "all",macroParam)]
          <a class="button-small pure-button" href="[r: link]">Dismiss Magic</a>
        </td>
      </tr>
    </table>
  </div>
</div>
<div class="container pure-g">
  <div class="pure-u-1">
    <i>Current HP & AP</i>
    <hr> 
    [h: macroParam = json.set("{}", "tokenId", tokenId)]
    [r, if(isNPC(tokenId) && !isGM()), code: {
      [r, macro("viewWoundOnly@Lib:RQII"): macroParam]
    };{
        [r, macro("viewCurrentAPHP@Lib:RQII"): macroParam]
    }]
  </div>
</div>
<div class="container pure-g">
  <div class="pure-u-1">
    <i>Current Hold Weapon</i>
    <hr>
    [h: macroParam = json.set("{}", "tokenId", tokenId)]
    [r, macro("viewCurrentWeapons@Lib:RQII"): macroParam]
  </div>
</div>
<div class="container pure-g">
  <div class="pure-u-1">
    <i>Combat status - Data</i>
    <hr>
    <table class="content pure-table pure-table-striped table-striped-custom">
      <tr>
        <td colspan="2">Turn</td>
        <td colspan="2">CA values</td>
        <td colspan="2">Compute CA</td>
        <td colspan="4">Malus</td>
    
      </tr>
      <tr>
        <td>turnStatus</td><td> [r: turnStatus] </td>
        <td>activeCA</td><td> [r: activeCA] </td>
        <td>baseCA</td><td> [r: baseCA] </td>
        <td>castCA</td><td> [r: castCA] </td>
        <td>lostProCA</td><td> [r: lostProCA] </td>
      </tr>
      <tr>
        <td>activeTurn</td><td> [r: activeTurn] </td> 
        <td>ccCA</td><td> [r: ccCA] </td>
        <td>bonusCA</td><td> [r: bonusCA] </td>
        <td>reloadCA</td><td>[r: reloadCA] </td>
        <td>lostCA</td><td> [r: lostCA] </td>
      </tr>
      <tr>
        <td>chargeStatus</td><td>[r: chargeStatus]</td>
        <td>proactiveCA</td><td> [r: proactiveCA] </td>
        <td>weaponCA</td><td> [r: weaponCA] </td>
        <td>firstEvade</td><td> [r: firstEvade] </td>
        <td>currWeaponNb</td><td> [r: currWeaponNb]</td>
      </tr>
      <tr>
        <td>situationMod</td><td>[r: situationMod]</td>
        <td>reactiveCA</td><td> [r: reactiveCA] </td>
        <td>magicCA</td><td> [r: magicCA] </td>
        <td>weaponReach</td><td> [r: weaponReach]</td>
        <td>defWeaponNb</td><td> [r: defWeaponNb]</td>
      </tr>
      <tr>
        <td>spellReady</td><td>[r: spellReady]</td>
        <td></td><td></td>
        <td></td><td></td>
        <td></td><td></td>
        <td></td><td></td>
      </tr>
        <tr>
        <td>versionTag</td><td>[r: versionTag]</td>
        [h: cLogTokenExist = findToken(clogTokenId)]
        [r, if(cLogTokenExist == ""), code: {
          <td>cLogTokenId</td><td colspan="7">
            <span style="font-weight: bold;color:red">WARNING. Linked combatToken not found on this map.</span>
          </td>
        };{
          [h: combatProp = getProperty("combat",clogTokenId)]
          <td>cLogTokenId</td><td colspan="7">[r: cLogTokenId] ([r: json.get(combatProp,"desc")])</td>
        }]
      </tr>
      <tr>
        <td colspan="5">
          [h: macroParam = json.set("{}", "tokenId", tokenId)]
          [h: link = macroLinkText("setTokenCombatStatus@Lib:RQII", "all",macroParam)]
          <a class="pure-button" href="[r: link]">Edit Combat Status</a>
        </td>
      </tr>
    </table>
  </div>
</div>