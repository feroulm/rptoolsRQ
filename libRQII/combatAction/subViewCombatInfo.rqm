[h: "<!-- subViewCombatInfo - Display combat action and info that are always displayed. --"]
[h: "<!--  - a.k.a : do not depend if the token can achieve proactive or reactive action, this is evaluated in editCombatAction. Visible even if not joined to a combat. -->"]
[h: arguments = macro.args]
[h, if(json.isEmpty(arguments)), code:{
  [assert(0,"<i>combatAction::subViewCombatInfo</i> : no arguments, this macro can't be called without mandatory parameters",0)]
};
{
  [h: tokenId = json.get(arguments,"tokenId")]
  [h: srcWindow = json.get(arguments,"srcWindow")]
  [h, if(srcWindow == "") : srcWindow = "none"]
}]

<!-- Combat Status variable -->
[h: tCombatStatus = getProperty("combatStatus",tokenId)]

[h: turnStatus = json.get(tCombatStatus,"turnStatus")]
[h: activeTurn = json.get(tCombatStatus,"activeTurn")]
[h: chargeStatus = json.get(tCombatStatus,"chargeStatus")]
[h: spellReady = json.get(tCombatStatus,"spellReady")]
[h: situationMod = json.get(tCombatStatus,"situationMod")]

[h: activeCA = json.get(tCombatStatus,"activeCA")]
[h: ccCA = json.get(tCombatStatus,"ccCA")]
[h: proactiveCA = json.get(tCombatStatus,"proactiveCA")]
[h: reactiveCA = json.get(tCombatStatus,"reactiveCA")]

[h: baseCA = json.get(tCombatStatus,"baseCA")]
[h: bonusCA = json.get(tCombatStatus,"bonusCA")]
[h: weaponCA = json.get(tCombatStatus,"weaponCA")]
[h: magicCA = json.get(tCombatStatus,"magicCA")]

[h: castCA = json.get(tCombatStatus,"castCA")]
[h: reloadCA = json.get(tCombatStatus,"reloadCA")]
[h: lostProCA = json.get(tCombatStatus,"lostProCA")]
[h: lostCA = json.get(tCombatStatus,"lostCA")]
[h: firstEvade = json.get(tCombatStatus,"firstEvade")]
[h: weaponReach = json.get(tCombatStatus,"weaponReach")]
[h: "<!-- reset to a jsonArray (this to support not yet migrated token with  previous usage of weaponReach -->"]
[h, if (json.type(weaponReach) != "ARRAY") : weaponReach = '[]']

[h: currWeaponNb = json.get(tCombatStatus,"currWeaponNb")]
[h: defWeaponNb = json.get(tCombatStatus,"defWeaponNb")]

[h: clogTokenId = json.get(tCombatStatus,"cLogTokenId")]
[h: versionTag = json.get(tCombatStatus,"versionTag")]

<div class="container pure-g">
  <div class="pure-u-1">
    <b>Change after combat action</b>
    <hr>
    [r, if(spellReady > 0): "<span style='font-weight: bold;color:red'><b>!!</b> You have used Hold Magic, and have a spell to release<br></span>"]

    <table style="padding: 0px; cellspacing:0px;">
      <tr>
        <td>        
          [h: macroParam = json.set("{}", "tokenId", tokenId,"msg","","tab","aphp")]
          [h: link = macroLinktext("openSheet@Lib:RQII", "all",macroParam)]
          
          <a class="button-small pure-button" href="[r: link]">Damage / Heal</a>
        </td>
        <td>
          [h: macroParam = json.set("{}", "tokenId", tokenId,"srcWindow",srcWindow)]
          [h: link = macroLinkText("openHumCombatAttr@Lib:RQII", "all",macroParam)]
          <a class="button-small pure-button" href="[r: link]">Change Charac & Weapon</a>
        </td>    
        <td>
          [h: macroParam = json.set("{}", "tokenId", tokenId,"action","changereach","srcWindow",srcWindow)]
          [h: link = macroLinkText("updateCombat@Lib:RQII", "all",macroParam)]
          <a class="button-small pure-button" href="[r: link]">Change reach</a>
        </td>
      
        <td>
          [h: macroParam = json.set("{}", "tokenId", tokenId,"action","engage","srcWindow",srcWindow)]
          [h: link = macroLinkText("updateCombat@Lib:RQII", "all",macroParam)]
          <a class="button-small pure-button" href="[r: link]">Engage</a>
        </td>       
      </tr>
      <tr>
        <td>
          [h: macroParam = json.set("{}", "tokenId", tokenId,"action","dismissMagic","srcWindow",srcWindow)]
          [h: link = macroLinkText("updateCombat@Lib:RQII", "all",macroParam)]
          <a class="button-small pure-button" href="[r: link]">Dismiss Magic</a>
        </td>
      [r, if(situationMod == "prone"), code:{
        <td>
          [h: macroParam = json.set("{}", "tokenId", tokenId,"action","delprone","srcWindow",srcWindow)]
          [h: link = macroLinkText("updateCombat@Lib:RQII", "all",macroParam)]
          <a class="button-small pure-button" href="[r: link]">Remove Prone</a>
        </td>
      }]
      [r, if(situationMod != "prone"), code:{
        <td>
          [h: macroParam = json.set("{}", "tokenId", tokenId,"action","prone","srcWindow",srcWindow)]
          [h: link = macroLinkText("updateCombat@Lib:RQII", "all",macroParam)]
          <a class="button-small pure-button" href="[r: link]">Prone</a>
        </td>
      }]
      [r, if(turnStatus != "disabled"), code:{
        <td>
          [h: macroParam = json.set("{}", "tokenId", tokenId,"action","disable","srcWindow",srcWindow)]
          [h: link = macroLinkText("updateCombat@Lib:RQII", "all",macroParam)]
          <a class="button-small pure-button" href="[r: link]">Disable</a>
        </td>
      }]
      [r, if(turnStatus == "disabled"), code:{
        <td>
          [h: macroParam = json.set("{}", "tokenId", tokenId,"action","enable","srcWindow",srcWindow)]
          [h: link = macroLinkText("updateCombat@Lib:RQII", "all",macroParam)]
          <a class="button-small pure-button" href="[r: link]">Enable</a>
        </td>
      }]
      
        <td>
          [h: macroParam = json.set("{}", "tokenId", tokenId,"action","disengage","srcWindow",srcWindow)]
          [h: link = macroLinkText("updateCombat@Lib:RQII", "all",macroParam)]
          <a class="button-small pure-button" href="[r: link]">Disengage</a>
        </td>      
      </tr>
      <tr>
      [r, if(spellReady>0), code:{
        <td>
          [h: macroParam = json.set("{}", "tokenId", tokenId,"action","releaseSpell","srcWindow",srcWindow)]
          [h: link = macroLinkText("updateCombat@Lib:RQII", "all",macroParam)]
          <a class="button-small pure-button" href="[r: link]">Release Spell</a>
        </td>
      }]
    
      </tr>
    </table>
  </div>
</div>
<div class="container pure-g">
  <div class="pure-u-1">
    <i>Current HP & AP</i>
    <hr> 
    [h: macroParam = json.set("{}", "tokenId", tokenId,"srcWindow",srcWindow)]
    [r, if(isNPC(tokenId) && !isGM()), code: {
      [r, macro("viewWoundOnly@Lib:RQII"): macroParam]
    };{
        [r, macro("viewCurrentAPHP@Lib:RQII"): macroParam]
    }]
  </div>
</div>
<div class="container pure-g">
  <div class="pure-u-1">
    <i>Current Hold Weapon</i>
    <hr>
    [h: macroParam = json.set("{}", "tokenId", tokenId,"srcWindow",srcWindow)]
    [r, macro("viewCurrentWeapons@Lib:RQII"): macroParam]
  </div>
</div>
<div class="container pure-g">
  <div class="pure-u-1">
    <i>Combat status - Data</i>
    <hr>
    <table class="content pure-table pure-table-striped table-striped-custom">
      <tr>
        <td colspan="2">Turn</td>
        <td colspan="2">CA values</td>
        <td colspan="2">Compute CA</td>
        <td colspan="4">Malus</td>
    
      </tr>
      <tr>
        <td>turnStatus</td><td> [r: turnStatus] </td>
        <td>activeCA</td><td> [r: activeCA] </td>
        <td>baseCA</td><td> [r: baseCA] </td>
        <td>castCA</td><td> [r: castCA] </td>
        <td>lostProCA</td><td> [r: lostProCA] </td>
      </tr>
      <tr>
        <td>activeTurn</td><td> [r: activeTurn] </td> 
        <td>ccCA</td><td> [r: ccCA] </td>
        <td>bonusCA</td><td> [r: bonusCA] </td>
        <td>reloadCA</td><td>[r: reloadCA] </td>
        <td>lostCA</td><td> [r: lostCA] </td>
      </tr>
      <tr>
        <td>chargeStatus</td><td>[r: chargeStatus]</td>
        <td>proactiveCA</td><td> [r: proactiveCA] </td>
        <td>weaponCA</td><td> [r: weaponCA] </td>
        <td>firstEvade</td><td> [r: firstEvade] </td>
        <td>currWeaponNb</td><td> [r: currWeaponNb]</td>
      </tr>
      <tr>
        <td>situationMod</td><td>[r: situationMod]</td>
        <td>reactiveCA</td><td> [r: reactiveCA] </td>
        <td>magicCA</td><td> [r: magicCA] </td>
        <td>weaponReach</td><td> </td>
        <td>defWeaponNb</td><td> [r: defWeaponNb]</td>
      </tr>
      <tr>
        <td>spellReady</td><td>[r: spellReady]</td>
        <td></td><td></td>
        <td></td><td></td>
        <td></td><td></td>
        <td></td><td></td>
      </tr>
        <tr>
        <td>versionTag</td><td>[r: versionTag]</td>
        [h: cLogTokenExist = findToken(clogTokenId)]
        [r, if(cLogTokenExist == ""), code: {
          <td>cLogTokenId</td><td colspan="7">
            <span style="font-weight: bold;color:red">WARNING. Linked combatToken not found on this map.</span>
          </td>
        };{
          [h: combatProp = getProperty("combat",clogTokenId)]
          <td>cLogTokenId</td><td colspan="7">[r: cLogTokenId] ([r: json.get(combatProp,"desc")])</td>
        }]
      </tr>
      <tr>
        <td colspan="5">
          [h: macroParam = json.set("{}", "tokenId", tokenId,"srcWindow",srcWindow)]
          [h: link = macroLinkText("setTokenCombatStatus@Lib:RQII", "all",macroParam)]
          <a class="pure-button" href="[r: link]">Edit Combat Status</a>
        </td>
      </tr>
    </table>
  </div>
</div>