[h: tokenId = json.get(macro.args, "tokenId")]
[h: action = json.get(macro.args, "action")]
[h: actionLabel = json.get(macro.args, "edit_btn")]

[h: currentCombatStatus = getProperty("combatStatus",tokenId)]
[h: activeCA = json.get(currentCombatStatus,"activeCA")]
[h: reactiveCA = json.get(currentCombatStatus,"reactiveCA")]
[h: firstEvade = json.get(currentCombatStatus,"firstEvade")]

[r, switch(action), code:
  case "parry" : {
  	[h: remainingCA = activeCA - 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeCA",remainingCA)]
    [h: reactiveCA = reactiveCA + 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"reactiveCA",reactiveCA)]  

    [h, if (remainingCA == 0): currentCombatStatus = json.set(currentCombatStatus,"turnStatus","out")]
    [h, if (remainingCA == 0): setState("Out", 1, tokenId)]

    [h: msg = actionLabel+" is done, one reactive CA lost."]
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]
    [h: logMsg = actionLabel]
  };
  case "evade" : {
  	[h: remainingCA = activeCA - 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"activeCA",remainingCA)]
    [h: reactiveCA = reactiveCA + 1]
    [h: currentCombatStatus = json.set(currentCombatStatus,"reactiveCA",reactiveCA)]  

    <!-- toggle evade one time on two -->
    [h, if (firstEvade == 0),code:{
    	[h: currentCombatStatus = json.set(currentCombatStatus,"firstEvade",1)]
    	[h: msg = "First "+actionLabel+" is done, next proactive CA lost."]
    	[h: logMsg = "First "+actionLabel]
    }]
    [h, if (firstEvade > 0),code:{
    	[h: currentCombatStatus = json.set(currentCombatStatus,"firstEvade",0)]
    	[h: msg = "Second "+actionLabel+" is done, proactive action possible next turn."]
    	[h: logMsg = "Second "+actionLabel]
    }]

    [h, if (remainingCA == 0): currentCombatStatus = json.set(currentCombatStatus,"turnStatus","out")]
    [h, if (remainingCA == 0): setState("Out", 1, tokenId)]
 
    [h: setProperty("combatStatus",currentCombatStatus,tokenId)]
  };
  case "interrupt" : {
  	<!-- remove current initiative to current token -->
  	[h: oldTokenId = getInitiativeToken()]
  	[h: setState("CurrentTurn", 0, oldTokenId)]
  	[h: oldTokenCombatStatus = getProperty("combatStatus",oldTokenId)]
  	[h: oldTokenCombatStatus = json.set(oldTokenCombatStatus,"activeTurn",0)]
  	[h: setProperty("combatStatus",oldTokenCombatStatus,oldTokenId)]
  	<!-- get current token offset in order to set Current Initiative (which is using only offset ...)-->
  	[h: newTokenOffset = getInitiativeTokenOffset(tokenId)]
   	[h: setCurrentInitiative(newTokenOffset)]
    [h: currentCombatStatus = json.set(currentCombatStatus,"turnStatus","on")]
   	[h: currentCombatStatus = json.set(currentCombatStatus,"activeTurn",1)]
   	[h: setProperty("combatStatus",currentCombatStatus,tokenId)]
   	[h: setState("CurrentTurn", 1, tokenId)]
   	<!-- Refresh / Open Combat Action Window for current Active Token-->
   	[h: msg = "Interrupt is done, take your turn"]
   	[h: logMsg = actionLabel]
  };
  default: {
 	<!-- do nothing -->
 	<br>Unexistant action !<br>
 }
]

<!-- log the action -->
[h: logCombatAction(tokenId,"reactive",logMsg)]
    
[r: getName(tokenId)] has done : [r: logMsg]

<!-- Refresh Combat Action Window for current Active Token-->
[h: macroParam = json.set("{}", "tokenId", tokenId,"msg",msg)]
[h, macro("openCombatAction@Lib:RQII"): macroParam]
    
<!-- Refresh Global Combat Window -->
[r, macro("openCombat@Lib:RQII"): ""]